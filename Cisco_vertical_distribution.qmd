---
title: "Cisco vertical distribution analysis"
author: "Jeremiah Shrovnal"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html: 
    toc: true
    code-fold: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

# Read data

```{r read_data_and_make_figures}
library( tidyverse )
library( patchwork )

# Path for WIDNR1 DB spreadsheets
ref_dir <- "C:/Users/SHROVJ/Documents/Day 1 DB test/Excel workbook outputs/WIDNR_Database/"

# Read in spreadsheets as list
widnr_db <- base::list.files(
                path = ref_dir, 
                pattern = ".csv", 
                full.names = TRUE
            ) |> 
              rlang::set_names(
                  tools::file_path_sans_ext(
                      base::basename(
                          base::list.files(
                              path = ref_dir, 
                              pattern = ".csv", 
                              full.names = TRUE
                          )
                      )
                  )
              ) |>
              purrr::map( readr::read_csv )

# Full individual Cisco info
fish_cisco_info <- widnr_db$tbldata_fish |>
                      dplyr::select(
                          IDNumber:AgeStructure
                      ) |>
                      dplyr::left_join(
                          widnr_db$tblcode_species,
                          by = "Species"
                      ) |>
                      dplyr::filter(
                          grepl( "lake herring", tolower( Spscom ) ) # ONLY LAKE HERRING FOR THIS
                      ) |>
                      dplyr::left_join(
                          widnr_db$tbldata_collection |>
                              dplyr::select( IDNumber:SecchiDepth ) |>
                              dplyr::mutate(
                                  dplyr::across(
                                      DateSet:DateLift, 
                                      lubridate::mdy_hms
                                  ),
                                  SetYear = lubridate::year( DateSet ),
                                  LiftYear = lubridate::year( DateLift )
                              ),
                          by = c( "IDNumber" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_survey, 
                        by = c( "SurveyCode" )
                      ) |>
                      dplyr::filter(
                        ProjectDescription %in% 
                          c(
                            "spawning lake herring assessment",
                            "summer index"
                          )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_gear |>
                          dplyr::rename( MeshLayout = Mesh ),
                        by = c( "GearCode" = "Gearcode" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_station,
                        by = c( "Station" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_agestructure,
                        by = c( "AgeStructure" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tbldata_age |> 
                          filter(
                            !( AgeID %in% c( 49745, 49754 ) )
                          ),
                        by = c( "FishID", "AgeStructure" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_clip,
                        by = c( "Clip" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_sex |>
                          dplyr::rename( LSTC_code_sex = LSTC_code ),
                        by = c( "SexCode" )
                      ) |>
                      dplyr::left_join(
                        widnr_db$tblcode_maturity |>
                          dplyr::rename( LSTC_code_mat = LSTC_code ),
                        by = c( "MaturityCode" )
                      ) |> 
                      dplyr::mutate(
                        YearClass = SetYear - Age
                      )

# Full processed Cisco with bio information
fullfish_cisco_noinfo <- widnr_db$tbldata_number |>
                          dplyr::left_join(
                            widnr_db$tbldata_collection |>
                              dplyr::select( IDNumber:SecchiDepth ) |>
                              dplyr::mutate(
                                dplyr::across(
                                  DateSet:DateLift, 
                                  lubridate::mdy_hms
                                ),
                                SetYear = lubridate::year( DateSet ),
                                LiftYear = lubridate::year( DateLift )
                            ),
                            by = "IDNumber"
                          ) |>
                          dplyr::left_join(
                            widnr_db$tblcode_species,
                            by = "Species"
                          ) |>
                          dplyr::left_join(
                            widnr_db$tblcode_survey,
                            by = "SurveyCode"
                          ) |>
                          dplyr::left_join(
                            widnr_db$tblcode_station,
                            by = "Station"
                          ) |>
                          dplyr::left_join(
                            widnr_db$tblcode_gear,
                            by = c("GearCode" = "Gearcode")
                          ) |> 
                          dplyr::filter(
                            grepl( "lake herring", tolower( Spscom ) ),
                            ProjectDescription == "spawning lake herring assessment",
                            GearFieldCode %in% c( "Top Net", "Bottom Net" )
                          ) 

# Read in shapefiles
shape_dir <- "C:/Users/SHROVJ/State of Wisconsin/Carl, Dray D - DNR - Shrovnal Cisco Data/Shrovnal Shapefiles"

# Read as list
SuperiorShapeFiles <- base::list.files(
                        path = shape_dir,
                        pattern = "\\.shp$", 
                        recursive = TRUE, 
                        full.names = TRUE
                      ) |> 
                      rlang::set_names(
                        tools::file_path_sans_ext(
                          base::basename(
                            base::list.files(
                              path = shape_dir, 
                              pattern = "\\.shp$", 
                              recursive = TRUE, 
                              full.names = TRUE
                            )
                          )
                        )
                      ) |>
                      purrr::map( ~sf::st_read( .x ) )

# Organize data
analyzedata <- fish_cisco_info |>
                filter(
                  SetYear >= 2016,
                  Sex %in% c( "Male", "Female" ),
                  !( is.na( GearFieldCode ) ),
                  !( Maturity %in% c( "Not checked", "Immature" ) )
                ) |>
                mutate(
                  ProjectDescription = if_else(
                    ProjectDescription == "summer index",
                    "Summer\nindex",
                    "Spawning Lake\nHerring Assessment"
                  ),
                  SampleDate = factor( lubridate::date( DateSet ) ),
                  GearFieldCode = factor(
                    GearFieldCode,
                    levels = c( "Top Net", "Bottom Net" )
                  ),
                  Site = case_when(
                    Site == "N Eagle Island" ~ "Eagle Island",
                    Site == "Bouy 14 Flats" ~ "Buoy 14 Flats",
                    Site == "N. Sand Island Lighthouse" ~ "N Sand Island Light",
                    TRUE ~ Site
                  )
                ) |>
                group_by(
                  Sex,
                  Maturity,
                  SampleDate,
                  GearFieldCode,
                  Grid,
                  Site
                ) |>
                summarize(
                  Count = n()
                ) |>
                pivot_wider(
                  names_from = GearFieldCode,
                  values_from = Count
                ) |>
                mutate(
                  across(
                    `Bottom Net`:`Top Net`, ~replace_na( ., 0 )
                  ),
                  `Total Catch` = `Bottom Net` + `Top Net`
                ) |>
                ungroup() |>
                complete(
                  Sex,
                  Maturity,
                  SampleDate
                ) |>
                mutate(
                  PlotDate = lubridate::ymd( SampleDate, tz = "America/Chicago" ),
                  SetYear = lubridate::year( PlotDate ),
                  RelativeDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                  RelativeDayofYear = if_else(
                    SetYear %in% c( 2016, 2020 ),
                    RelativeDayofYear - 1,
                    RelativeDayofYear
                  )
                ) |> 
                select(
                  -c( PlotDate )
                ) |> 
                left_join(
                  fish_cisco_info |>
                    filter(
                      SetYear >= 2016,
                      Sex %in% c( "Male", "Female" ),
                      !( is.na( GearFieldCode ) ),
                      Maturity == "Spent"
                    ) |>
                    mutate(
                      ProjectDescription = if_else(
                        ProjectDescription == "summer index",
                        "Summer\nindex",
                        "Spawning Lake\nHerring Assessment"
                      ),
                      SampleDate = factor( lubridate::date( DateSet ) ),
                      GearFieldCode = factor(
                        GearFieldCode,
                        levels = c( "Top Net", "Bottom Net" )
                      )
                    ) |>
                    distinct(
                      SampleDate
                    ) |>
                    mutate(
                      Spawn = "After"
                    ),
                  by = "SampleDate"
                ) |>
                mutate(
                  Spawn = if_else(
                    is.na( Spawn ),
                    "Before",
                    Spawn
                  )
                ) |>
                left_join(
                  widnr_db$tblcode_station |> 
                    filter(
                      SiteNotes %in% c( "Top", "Bottom" )
                    ) |> 
                    mutate(
                      Site = case_when(
                        Site == "N Eagle Island" ~ "Eagle Island",
                        Site == "Bouy 14 Flats" ~ "Buoy 14 Flats",
                        TRUE ~ Site
                      ),
                      DepthAvg = ( DepthIn + DepthOut ) / 2
                    ) |> 
                    group_by(
                      Site
                    ) |> 
                    summarize(
                      NetDepth = mean(DepthAvg)
                    ),
                  by = "Site"
                ) |> 
                arrange(
                  desc( Spawn ),
                  SampleDate,
                  Maturity,
                  Sex,
                  NetDepth
                ) |>
                rename(
                  Bottom = `Bottom Net`,
                  Top = `Top Net`,
                  Total = `Total Catch`
                ) |>
                mutate(
                  Sample = as.factor( as.numeric( SampleDate ) )
                )
  
analyzedatabefore <- analyzedata |> 
                      filter(
                        Maturity != "Spent",
                        Spawn == "Before"
                      ) |> 
                      mutate(
                        CenteredNetDepth = scale( NetDepth )[,1]
                      )

analyzedataafter <- analyzedata |> 
                      filter(
                        Spawn == "After"
                      ) |> 
                      mutate(
                        CenteredNetDepth = scale( NetDepth )[,1]
                      )
```

# Initial visualizations

## Sample dates

```{r}
sampledates_mat <- fish_cisco_info |> 
                    filter(
                      SetYear >= 2016,
                      Sex %in% c( "Male", "Female" ),
                      !( is.na( GearFieldCode ) )
                    ) |> 
                    mutate(
                      ProjectDescription = if_else(
                        ProjectDescription == "summer index",
                        "Summer\nindex",
                        "Spawning Lake\nHerring Assessment"
                      ),
                      PlotDate = lubridate::date( DateSet ),
                      PlotDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                      PlotDayofYear = if_else(
                        SetYear %in% c( 2016, 2020 ),
                        PlotDayofYear - 1,
                        PlotDayofYear
                      ),
                      GearFieldCode = factor(
                        GearFieldCode,
                        levels = c( "Top Net", "Bottom Net" )
                      )
                    ) |> 
                    ggplot(
                      aes(
                        x = PlotDayofYear,
                        y = PlotDayofYear
                      )
                    ) +
                      geom_point(
                        aes(
                          fill = factor( PlotDayofYear )
                        ),
                        shape = 21,
                        color = "black",
                        size = 4
                      ) +
                      theme_bw() +
                      scale_x_continuous(
                        "",
                        labels = function( x ) format( as.Date( as.character( x ), "%j" ), "%d-%b" ),
                        expand = expansion(
                          mult = c( 0.15, 0.15 )
                        )
                      ) +
                      scale_y_continuous(
                        "",
                        labels = function( x ) format( as.Date( as.character( x ), "%j" ), "%d-%b" ),
                        expand = expansion(
                          mult = c( 0.15, 0.15 )
                        )
                      ) +
                      facet_wrap(
                        ~ SetYear,
                        ncol = 1
                      ) +
                      theme(
                        axis.text.x = element_text(
                          angle = 270,
                          vjust = 0.5,
                          hjust = 0
                        ),
                        legend.position = "none"
                      ) +
                      viridis::scale_fill_viridis(
                        discrete = TRUE,
                        option = "H",
                        begin = 0.1,
                        end = 0.875
                      )

sampledates_mat_p <- analyzedata |> 
                      filter(
                        SetYear >= 2016,
                        Sex %in% c( "Male", "Female" )
                      ) |> 
                      mutate(
                        PlotDate = lubridate::date( SampleDate ),
                        PlotDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                        PlotDayofYear = if_else(
                          SetYear %in% c( 2016, 2020 ),
                          PlotDayofYear - 1,
                          PlotDayofYear
                        ),
                        Spawn = if_else(
                          Spawn == "After",
                          "Spawning",
                          "Pre-spawn"
                        )
                      ) |> 
                      ggplot(
                        aes(
                          x = PlotDayofYear,
                          y = PlotDayofYear
                        )
                      ) +
                        geom_point(
                          aes(
                            fill = factor( PlotDayofYear ),
                            color = factor( Spawn )
                          ),
                          shape = 21,
                          size = 4
                        ) +
                        theme_bw() +
                        scale_x_continuous(
                          "",
                          labels = function( x ) format( as.Date( as.character( x ), "%j" ), "%d-%b" ),
                          expand = expansion(
                            mult = c( 0.15, 0.15 )
                          )
                        ) +
                        scale_y_continuous(
                          "",
                          labels = function( x ) format( as.Date( as.character( x ), "%j" ), "%d-%b" ),
                          expand = expansion(
                            mult = c( 0.15, 0.15 )
                          )
                        ) +
                        facet_wrap(
                          ~ SetYear,
                          ncol = 1
                        ) +
                        theme(
                          axis.text.x = element_text(
                            angle = 270,
                            vjust = 0.5,
                            hjust = 0
                          ),
                          legend.position = "top"
                        ) +
                        scale_color_manual(
                          "",
                          values = c(
                            "Spawning" = "black",
                            "Pre-spawn" = "grey60"
                          )
                        ) +
                        viridis::scale_fill_viridis(
                          discrete = TRUE,
                          option = "H",
                          begin = 0.1,
                          end = 0.875,
                          guide = "none"
                        )

sampledates_mat_px <- analyzedata |> 
                        filter(
                          SetYear >= 2016,
                          Sex %in% c( "Male", "Female" )
                        ) |> 
                        mutate(
                          PlotDate = lubridate::date( SampleDate ),
                          PlotDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                          PlotDayofYear = if_else(
                            SetYear %in% c( 2016, 2020 ),
                            PlotDayofYear - 1,
                            PlotDayofYear
                          ),
                          Spawn = if_else(
                            Spawn == "After",
                            "Spawning",
                            "Pre-spawn"
                          )
                        ) |> 
                        ggplot(
                          aes(
                            x = PlotDayofYear
                          )
                        ) +
                          geom_point(
                            aes(
                              y = 0,
                              fill = factor( PlotDayofYear ),
                              color = factor( Spawn )
                            ),
                            shape = 21,
                            size = 4
                          ) +
                          theme_classic() +
                          scale_x_continuous(
                            "",
                            labels = function( x ) format( as.Date( as.character( x ), "%j" ), "%d-%b" ),
                            expand = expansion(
                              mult = c( 0.15, 0.15 )
                            )
                          ) +
                          scale_y_continuous(
                            "",
                            breaks = c( 0 ),
                            labels = "",
                            expand = expansion(
                              mult = c( 0.15, 0.15 )
                            )
                          ) +
                          facet_wrap(
                            ~ SetYear,
                            ncol = 1
                          ) +
                          theme(
                            axis.text.x = element_text(
                              angle = 270,
                              vjust = 0.5,
                              hjust = 0
                            ),
                            legend.position = "top",
                            panel.border = element_rect( color = "black", fill = NA, linewidth = 1 )
                          ) +
                          scale_color_manual(
                            "",
                            values = c(
                              "Spawning" = "black",
                              "Pre-spawn" = "grey60"
                            )
                          ) +
                          viridis::scale_fill_viridis(
                            discrete = TRUE,
                            option = "H",
                            begin = 0.1,
                            end = 0.875,
                            guide = "none"
                          )
```

## Sample map

```{r}
LS_inset <- ggplot() +
              geom_sf(
                data = SuperiorShapeFiles$lake_superior_basin |> 
                  sf::st_transform( '+proj=longlat +datum=WGS84' ),
                fill = NA,
                linewidth = 0.5
              ) +
              geom_rect(
                aes( xmin = -92.3, xmax = -89.75, ymin = 46.5, ymax = 47.35 ),
                color = "black",
                linewidth = 2,
                fill = NA
              ) +
              theme_classic() +
              theme(
                panel.border = element_rect( color = "black", fill = NA ),
                axis.text = element_blank()
              ) +
              coord_sf(
                label_axes = list(
                  bottom = "E", top = "E",
                  left = "N", right = "N"
                )
              )

WI_grids <- ggplot() +
              geom_sf(
                data = SuperiorShapeFiles$lake_superior_basin |> 
                  sf::st_transform( '+proj=longlat +datum=WGS84' ),
                fill = NA,
                linewidth = 0.5
              ) +
              geom_sf(
                data = SuperiorShapeFiles$StatGridsWI |> 
                  sf::st_transform( '+proj=longlat +datum=WGS84' ),
                fill = NA
              ) +
              theme_classic() +
              theme(
                panel.border = element_rect( color = "black", fill = NA )
              ) +
              ggspatial::annotation_scale(
                location = "bl",
                width_hint = 0.15
              ) +
              ggspatial::annotation_north_arrow(
                location = "br",
                which_north = "true",
                pad_x = ggplot2::unit( 0.03, "in" ),
                pad_y = ggplot2::unit( 0.05, "in" ),
                style = ggspatial::north_arrow_fancy_orienteering
              ) +
              coord_sf(
                xlim = c( -89.8, -92.25 ),
                ylim = c( 46.55, 47.3 ),
                label_axes = list(
                  bottom = "E", top = "E",
                  left = "N", right = "N"
                )
              )

InsetPlot <- WI_grids + inset_element( LS_inset, 0.01, 0.65, 0.275, 1 )

ggsave( "Figure1_Map.tiff", plot = InsetPlot, dpi = 350, width = 10, height = 7, units = "in" )

SampleMap_spawn_facet <- fish_cisco_info |> 
                            filter(
                              ProjectDescription == "spawning lake herring assessment",
                              SetYear >= 2016,
                              Sex %in% c( "Male", "Female" ),
                              !( is.na( GearFieldCode ) )
                            ) |>
                            bind_rows(
                              fish_cisco_info |>
                                filter(
                                  ProjectDescription == "spawning lake herring assessment",
                                  SetYear >= 2016,
                                  Sex %in% c( "Male", "Female" ),
                                  !( is.na( GearFieldCode ) )
                                ) |> 
                                dplyr::group_by(
                                  SetYear, Grid, IDNumber
                                ) |>
                                dplyr::summarize(
                                  Total_caught = n()
                                ) |>
                                dplyr::ungroup()
                            ) |>
                            rename( Year = SetYear ) |>
                            distinct(
                              Year,
                              Grid, 
                              DateSet
                            ) |>
                            mutate(
                              PlotDate = lubridate::date( DateSet ),
                              PlotDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                              PlotDayofYear = if_else(
                                Year %in% c( 2016, 2020 ),
                                PlotDayofYear - 1,
                                PlotDayofYear
                              )
                            ) |>
                            ungroup() |>
                            filter(
                              PlotDayofYear > 0,
                              !( PlotDayofYear == 341 & Grid == 1208 & Year == 2022 )
                            ) |> 
                            inner_join(
                              SuperiorShapeFiles$StatGridsWI,
                              by = c( "Grid" = "GRID10MIN" )
                            ) |> 
                            sf::st_as_sf() |> 
                            sf::st_transform( '+proj=longlat +datum=WGS84' ) |> 
                            ggplot() +
                              geom_sf(
                                data = SuperiorShapeFiles$lake_superior_basin,
                                fill = NA
                              ) +
                              geom_sf(
                                data = SuperiorShapeFiles$StatGridsWI,
                                fill = NA
                              ) +
                              geom_sf(
                                aes(
                                  fill = factor(PlotDayofYear)
                                )
                              ) +
                              labs(
                                x = "",
                                y = "",
                                fill = ""
                              ) +
                              theme_bw() +
                              ggspatial::annotation_scale(
                                data = tibble( Year = 2022 ),
                                location = "bl",
                                width_hint = 0.15
                              ) +
                              ggspatial::annotation_north_arrow(
                                data = tibble( Year = 2022 ),
                                location = "br",
                                which_north = "true",
                                pad_x = ggplot2::unit( 0.03, "in" ),
                                pad_y = ggplot2::unit( 0.05, "in" ),
                                style = ggspatial::north_arrow_fancy_orienteering
                              ) +
                              coord_sf(
                                xlim = c( -89.8, -92.25 ),
                                ylim = c( 46.55, 47.3 )
                              ) +
                              viridis::scale_fill_viridis(
                                discrete = TRUE,
                                option = "H",
                                begin = 0.1,
                                end = 0.875
                              ) +
                              theme(
                                legend.position = "none"
                              ) +
                              facet_wrap(
                                ~ Year,
                                ncol = 1
                              )

SampleMap_spawn_facet_p <- fish_cisco_info |> 
                            filter(
                              ProjectDescription == "spawning lake herring assessment",
                              SetYear >= 2016,
                              Sex %in% c( "Male", "Female" ),
                              !( is.na( GearFieldCode ) )
                            ) |>
                            bind_rows(
                              fish_cisco_info |>
                                mutate(
                                  Site = case_when(
                                    Site == "N Eagle Island" ~ "Eagle Island",
                                    Site == "Bouy 14 Flats" ~ "Buoy 14 Flats",
                                    Site == "N. Sand Island Lighthouse" ~ "N Sand Island Light",
                                    TRUE ~ Site
                                  )
                                ) |> 
                                filter(
                                  ProjectDescription == "spawning lake herring assessment",
                                  SetYear >= 2016,
                                  Sex %in% c( "Male", "Female" ),
                                  !( is.na( GearFieldCode ) )
                                ) |> 
                                dplyr::group_by(
                                  SetYear, Grid, IDNumber, Site
                                ) |>
                                dplyr::summarize(
                                  Total_caught = n()
                                ) |>
                                dplyr::ungroup()
                            ) |>
                            rename( Year = SetYear ) |>
                            distinct(
                              Year,
                              Grid, 
                              DateSet
                            ) |>
                            mutate(
                              PlotDate = lubridate::date( DateSet ),
                              PlotDayofYear = as.numeric( format( PlotDate, "%j" ) ),
                              PlotDayofYear = if_else(
                                Year %in% c( 2016, 2020 ),
                                PlotDayofYear - 1,
                                PlotDayofYear
                              )
                            ) |>
                            ungroup() |>
                            filter(
                              PlotDayofYear > 0,
                              !( PlotDayofYear == 341 & Grid == 1208 & Year == 2022 )
                            ) |> 
                            inner_join(
                              SuperiorShapeFiles$StatGridsWI,
                              by = c( "Grid" = "GRID10MIN" )
                            ) |> 
                            sf::st_as_sf() |> 
                            sf::st_transform( '+proj=longlat +datum=WGS84' ) |> 
                            left_join(
                              analyzedata |> 
                                distinct(
                                  SetYear,
                                  Grid,
                                  Spawn
                                ) |> 
                                rename(
                                  Year = SetYear
                                ) |> 
                                filter(
                                  Grid > 0
                                ),
                              by = c(
                                "Year",
                                "Grid"
                              )
                            ) |> 
                            ggplot() +
                              geom_sf(
                                data = SuperiorShapeFiles$lake_superior_basin,
                                fill = NA
                              ) +
                              geom_sf(
                                data = SuperiorShapeFiles$StatGridsWI,
                                fill = NA
                              ) +
                              geom_sf(
                                aes(
                                  fill = factor( PlotDayofYear ),
                                  color = Spawn
                                ),
                                linewidth = 0.25
                              ) +
                              labs(
                                x = "",
                                y = "",
                                fill = ""
                              ) +
                              theme_classic() +
                              theme(
                                panel.border = element_rect( color = "black", fill = NA, linewidth = 1 )
                              ) +
                              scale_color_manual(
                                values = c(
                                  "After" = "black",
                                  "Before" = "grey60"
                                ),
                                guide = "none"
                              ) +
                              ggspatial::annotation_scale(
                                data = tibble( Year = 2022 ),
                                location = "bl",
                                width_hint = 0.15
                              ) +
                              ggspatial::annotation_north_arrow(
                                data = tibble( Year = 2022 ),
                                location = "br",
                                which_north = "true",
                                pad_x = ggplot2::unit( 0.02, "in" ),
                                pad_y = ggplot2::unit( 0.02, "in" ),
                                style = ggspatial::north_arrow_fancy_orienteering
                              ) +
                              coord_sf(
                                xlim = c( -89.8, -92.25 ),
                                ylim = c( 46.55, 47.3 )
                              ) +
                              viridis::scale_fill_viridis(
                                discrete = TRUE,
                                option = "H",
                                begin = 0.1,
                                end = 0.875,
                                guide = "none"
                              ) +
                              theme(
                                legend.position = "top"
                              ) +
                              facet_wrap(
                                ~ Year,
                                ncol = 1
                              )

sampledates_mat + SampleMap_spawn_facet + plot_layout( widths = c( 1, 2 ) )

sampledates_mat_p + SampleMap_spawn_facet_p + plot_layout( widths = c( 1, 2 ) )

Figure2_Dates <- sampledates_mat_px + SampleMap_spawn_facet_p + plot_layout( widths = c( 1, 2 ) )

ggsave( "Figure2_Dates.tiff", plot = Figure2_Dates, dpi = 350, width = 8.5, height = 11, units = "in" )
```

## Sex Ratio

```{r}
sexratiodate <- fish_cisco_info |>
                  filter(
                    SetYear >= 2016,
                    Sex %in% c( "Male", "Female" ),
                    Maturity != "Not checked",
                    !( is.na( GearFieldCode ) )
                  ) |>
                  mutate(
                    ProjectDescription = if_else(
                      ProjectDescription == "summer index",
                      "Summer\nindex",
                      "Spawning Lake\nHerring Assessment"
                    ),
                    PlotDate = lubridate::date( DateSet ),
                    GearFieldCode = factor(
                      GearFieldCode,
                      levels = c( "Top Net", "Bottom Net" )
                    )
                  ) |>
                  filter(
                    ProjectDescription == "Spawning Lake\nHerring Assessment"
                  ) |>
                  group_by( PlotDate ) |>
                  ggplot(
                    aes(
                      x = factor( PlotDate ),
                      fill = Sex
                    )
                  ) +
                    geom_bar() +
                    theme_bw() +
                    scale_fill_manual(
                      values = c(
                        "Female" = "#D7263D",
                        "Male" = "#558aa6"
                      )
                    ) +
                    facet_grid(
                      scales = "free",
                      rows = vars( GearFieldCode ),
                      cols = vars( SetYear )
                    ) +
                    theme(
                      legend.position = "top",
                      axis.text.x = element_text(
                        angle = 270,
                        vjust = 0.5,
                        hjust = 0
                      )
                    ) +
                    labs(
                      x = "",
                      fill = ""
                    ) +
                    scale_y_continuous(
                      "Catch",
                      expand = expansion(
                        mult = c(0.01, 0.01)
                      )
                    )

sexratiodate_eqy <- fish_cisco_info |>
                      filter(
                        SetYear >= 2016,
                        Sex %in% c("Male", "Female"),
                        Maturity != "Not checked",
                        !( is.na( GearFieldCode ) )
                      ) |>
                      mutate(
                        ProjectDescription = if_else(
                          ProjectDescription == "summer index",
                          "Summer\nindex",
                          "Spawning Lake\nHerring Assessment"
                        ),
                        PlotDate = lubridate::date( DateSet ),
                        GearFieldCode = factor(
                          GearFieldCode,
                          levels = c( "Top Net", "Bottom Net" )
                        ),
                        SampleDate = substr(
                          DateSet, 6, nchar( DateSet )
                        )
                      ) |>
                      filter(
                        ProjectDescription == "Spawning Lake\nHerring Assessment"
                      ) |>
                      group_by( SampleDate ) |>
                      ggplot(
                        aes(
                          x = factor( SampleDate ),
                          fill = Sex
                        )
                      ) +
                        geom_bar() +
                        theme_classic() +
                        scale_fill_manual(
                          values = c(
                            "Female" = "#D7263D",
                            "Male" = "#558aa6"
                          )
                        ) +
                        facet_grid(
                          scales = "free_x",
                          rows = vars( GearFieldCode ),
                          cols = vars( SetYear )
                        ) +
                        theme(
                          legend.position = "top",
                          axis.text.x = element_blank(),
                          axis.text.y = element_text( size = 11 ),
                          legend.text = element_text( size = 13 ),
                          axis.title = element_text( size = 13 ),
                          strip.text = element_text( size = 13 ),
                          title = element_text( size = 15 ),
                          panel.border = element_rect( color = "black", fill = NA, linewidth = 1 )
                        ) +
                        labs(
                          x = "",
                          fill = "",
                          title = "Sex ratio"
                        ) +
                        scale_y_continuous(
                          "Catch",
                          expand = expansion(
                            mult = c( 0.01, 0.01 )
                          )
                        )

sexratiodate
```

## Female Maturity

```{r}
femalematuritydate <- fish_cisco_info |> 
                        filter(
                          SetYear >= 2016,
                          Sex %in% c( "Male", "Female" ),
                          Maturity != "Not checked",
                          !( is.na( GearFieldCode ) )
                        ) |> 
                        mutate(
                          ProjectDescription = if_else(
                            ProjectDescription == "summer index",
                            "Summer\nindex",
                            "Spawning Lake\nHerring Assessment"
                          ),
                          PlotDate = lubridate::date( DateSet ),
                          PlotDateLabel = substr(
                            as.character( PlotDate ),
                            start = 6,
                            stop = nchar( as.character( PlotDate ) )
                          ),
                          GearFieldCode = factor(
                            GearFieldCode,
                            levels = c( "Top Net", "Bottom Net" )
                          )
                        ) |> 
                        filter(
                          ProjectDescription == "Spawning Lake\nHerring Assessment",
                          Sex == "Female"
                        ) |> 
                        group_by( PlotDate ) |> 
                        ggplot(
                          aes(
                            x = factor( PlotDateLabel ),
                            fill = Maturity
                          )
                        ) +
                          geom_bar(
                            position = "fill"
                          ) +
                          theme_bw() +
                          scale_fill_manual(
                            values = c(
                              "Green" = "#30123B",
                              "Immature" = "#28BBEB",
                              "Not checked" = "#7A0403",
                              "Ripe" = "#FB8021",
                              "Spent" = "#A2FC3C"
                            )
                          ) +
                          facet_grid(
                            scales = "free",
                            rows = vars( GearFieldCode ),
                            cols = vars( SetYear )
                          ) +
                          theme(
                            legend.position = "top",
                            axis.text.x = element_text(
                                angle = 270,
                                vjust = 0.5,
                                hjust = 0,
                                size = 13
                              ),
                            axis.text.y = element_text( size = 12 ),
                            legend.text = element_text( size = 13 ),
                            axis.title = element_text( size = 13 ),
                            strip.text = element_text( size = 13 ),
                            title = element_text( size = 15 )
                          ) +
                          labs(
                            x = "",
                            fill = "",
                            title = "Female maturity"
                          ) +
                          scale_y_continuous(
                            "Proportion",
                            expand = expansion(
                              mult = c(0.01, 0.01)
                            )
                          )

femalematuritydate_x <- fish_cisco_info |> 
                          filter(
                            SetYear >= 2016,
                            Sex %in% c( "Male", "Female" ),
                            Maturity != "Not checked",
                            !( is.na( GearFieldCode ) )
                          ) |> 
                          mutate(
                            ProjectDescription = if_else(
                              ProjectDescription == "summer index",
                              "Summer\nindex",
                              "Spawning Lake\nHerring Assessment"
                            ),
                            PlotDate = lubridate::date( DateSet ),
                            PlotDateLabel = substr(
                              as.character( PlotDate ),
                              start = 6,
                              stop = nchar( as.character( PlotDate ) )
                            ),
                            GearFieldCode = factor(
                              GearFieldCode,
                              levels = c( "Top Net", "Bottom Net" )
                            )
                          ) |> 
                          filter(
                            ProjectDescription == "Spawning Lake\nHerring Assessment",
                            Sex == "Female"
                          ) |> 
                          group_by( PlotDate ) |> 
                          ggplot(
                            aes(
                              x = factor( PlotDateLabel ),
                              fill = Maturity
                            )
                          ) +
                            geom_bar(
                              position = "fill"
                            ) +
                            theme_classic() +
                            scale_fill_manual(
                              values = c(
                                "Green" = "#30123B",
                                "Immature" = "#28BBEB",
                                "Not checked" = "#7A0403",
                                "Ripe" = "#FB8021",
                                "Spent" = "#A2FC3C"
                              )
                            ) +
                            facet_grid(
                              scales = "free",
                              rows = vars( GearFieldCode ),
                              cols = vars( SetYear )
                            ) +
                            theme(
                              legend.position = "none",
                              axis.text.x = element_blank(),
                              axis.text.y = element_text( size = 11 ),
                              legend.text = element_text( size = 13 ),
                              axis.title = element_text( size = 13 ),
                              strip.text = element_text( size = 13 ),
                              title = element_text( size = 15 ),
                              panel.border = element_rect( color = "black", fill = NA, linewidth = 1 )
                            ) +
                            labs(
                              x = "",
                              fill = "",
                              title = "Female maturity"
                            ) +
                            scale_y_continuous(
                              "Proportion",
                              expand = expansion(
                                mult = c(0.01, 0.01)
                              )
                            )

femalematuritydate
```

## Male maturity

```{r}
malematuritydate <- fish_cisco_info |> 
                        filter(
                          SetYear >= 2016,
                          Sex %in% c( "Male", "Female" ),
                          Maturity != "Not checked",
                          !( is.na( GearFieldCode ) )
                        ) |> 
                        mutate(
                          ProjectDescription = if_else(
                            ProjectDescription == "summer index",
                            "Summer\nindex",
                            "Spawning Lake\nHerring Assessment"
                          ),
                          PlotDate = lubridate::date( DateSet ),
                          PlotDateLabel = substr(
                            as.character( PlotDate ),
                            start = 6,
                            stop = nchar( as.character( PlotDate ) )
                          ),
                          GearFieldCode = factor(
                            GearFieldCode,
                            levels = c( "Top Net", "Bottom Net" )
                          )
                        ) |> 
                        filter(
                          ProjectDescription == "Spawning Lake\nHerring Assessment",
                          Sex == "Male"
                        ) |> 
                        group_by( PlotDate ) |> 
                        ggplot(
                          aes(
                            x = factor( PlotDateLabel ),
                            fill = Maturity
                          )
                        ) +
                          geom_bar(
                            position = "fill"
                          ) +
                          theme_bw() +
                          scale_fill_manual(
                            values = c(
                              "Green" = "#30123B",
                              "Immature" = "#28BBEB",
                              "Not checked" = "#7A0403",
                              "Ripe" = "#FB8021",
                              "Spent" = "#A2FC3C"
                            )
                          ) +
                          facet_grid(
                            scales = "free",
                            rows = vars( GearFieldCode ),
                            cols = vars( SetYear )
                          ) +
                          theme(
                            legend.position = "top",
                            axis.text.x = element_text(
                                angle = 270,
                                vjust = 0.5,
                                hjust = 0,
                                size = 13
                              ),
                            axis.text.y = element_text( size = 12 ),
                            legend.text = element_text( size = 13 ),
                            axis.title = element_text( size = 13 ),
                            strip.text = element_text( size = 13 ),
                            title = element_text( size = 15 )
                          ) +
                          labs(
                            x = "",
                            fill = "",
                            title = "Male maturity"
                          ) +
                          scale_y_continuous(
                            "Proportion",
                            expand = expansion(
                              mult = c( 0.01, 0.01 )
                            )
                          )

malematuritydate_x <- fish_cisco_info |> 
                        filter(
                          SetYear >= 2016,
                          Sex %in% c( "Male", "Female" ),
                          Maturity != "Not checked",
                          !( is.na( GearFieldCode ) )
                        ) |> 
                        mutate(
                          ProjectDescription = if_else(
                            ProjectDescription == "summer index",
                            "Summer\nindex",
                            "Spawning Lake\nHerring Assessment"
                          ),
                          PlotDate = lubridate::date( DateSet ),
                          PlotDateLabel = factor(
                            paste0(
                              substr(
                                as.character( PlotDate ),
                                start = 9,
                                stop = nchar( as.character( PlotDate ) )
                              ),
                              if_else( substr(
                                as.character( PlotDate ),
                                start = 6,
                                stop = 7
                              ) == "11", "-Nov", "-Dec" )
                            ),
                            levels = c( "14-Nov", "15-Nov", "16-Nov", "17-Nov", "18-Nov", "19-Nov", "29-Nov", "01-Dec", "02-Dec", "04-Dec", "05-Dec", "06-Dec", "07-Dec", "08-Dec", "11-Dec" )
                          ),
                          GearFieldCode = factor(
                            GearFieldCode,
                            levels = c( "Top Net", "Bottom Net" )
                          )
                        ) |> 
                        filter(
                          ProjectDescription == "Spawning Lake\nHerring Assessment",
                          Sex == "Male"
                        ) |> 
                        arrange( PlotDate ) |> 
                        ggplot(
                          aes(
                            x = PlotDateLabel,
                            fill = Maturity
                          )
                        ) +
                          geom_bar(
                            position = "fill"
                          ) +
                          theme_classic() +
                          scale_fill_manual(
                            values = c(
                              "Green" = "#30123B",
                              "Immature" = "#28BBEB",
                              "Not checked" = "#7A0403",
                              "Ripe" = "#FB8021",
                              "Spent" = "#A2FC3C"
                            )
                          ) +
                          facet_grid(
                            scales = "free",
                            rows = vars( GearFieldCode ),
                            cols = vars( SetYear )
                          ) +
                          theme(
                            legend.position = "bottom",
                            axis.text.x = element_text(
                                angle = 270,
                                vjust = 0.5,
                                hjust = 0,
                                size = 11
                              ),
                            axis.text.y = element_text( size = 11 ),
                            legend.text = element_text( size = 13 ),
                            axis.title = element_text( size = 13 ),
                            strip.text = element_text( size = 13 ),
                            title = element_text( size = 15 ),
                            panel.border = element_rect( color = "black", fill = NA, linewidth = 1 )
                          ) +
                          labs(
                            x = "",
                            fill = "",
                            title = "Male maturity"
                          ) +
                          scale_y_continuous(
                            "Proportion",
                            expand = expansion(
                              mult = c( 0.01, 0.01 )
                            )
                          )

malematuritydate
```

### SRatio and Mat plotted together

```{r}
Figure4_Catch <- ( sexratiodate_eqy + ggtitle("") + theme( legend.text = element_text( size = 18 ) ) ) / femalematuritydate_x / ( malematuritydate_x + theme( legend.text = element_text( size = 18 ) ) )

ggsave( "Figure4_Catch.tiff", plot = Figure4_Catch, dpi = 350, width = 12, height = 11.25, units = "in" )
```

# Sampling summary table

```{r}
bind_rows(
  # All fish with info
  fish_cisco_info |> 
    filter(
      SetYear >= 2016,
      !( is.na( GearFieldCode ) )
    ) |> 
    mutate(
      ProjectDescription = if_else(
        ProjectDescription == "summer index",
        "Summer\nindex",
        "Spawning Lake\nHerring Assessment"
      ),
      PlotDate = lubridate::date( DateSet ),
      SampleDate = factor( PlotDate ),
      GearFieldCode = factor(
        GearFieldCode,
        levels = c( "Top Net", "Bottom Net" )
      ),
      Sex = if_else(
        Sex %in% c( "Male", "Female" ),
        Sex,
        "Unknown"
      )
    ) |> 
    filter(
      ProjectDescription == "Spawning Lake\nHerring Assessment"
    ) |> 
    mutate(
      SampleDate = if_else(
        SampleDate == "2022-12-07" & Grid == 1208,
        "2022-12-06",
        SampleDate
      )
    ) |> 
    group_by(
      PlotDate,
      SetYear,
      GearFieldCode,
      Mesh,
      Grid,
      Sex,
      Maturity
    ) |> 
    summarize(
      TotalCatch = n()
    ) |> 
    mutate(
      Observed = TRUE
    ),
    # All counted fish
    fullfish_cisco_noinfo |> 
      mutate(
        PlotDate = lubridate::date( DateSet )
      ) |> 
      rename(
        Mesh = Mesh.x
      ) |> 
      group_by(
        PlotDate,
        SetYear,
        GearFieldCode,
        Grid,
        Mesh
      ) |> 
      summarize(
        TotalCatch = sum( Total_caught )
      ) |> 
      mutate(
        Sex = "Unknown",
        Maturity = "Unknown",
        Observed = FALSE
      )
  ) |>
  ungroup() |> 
  mutate(
    Maturity = if_else(
      Maturity == "Not checked",
      "Unknown",
      Maturity
    ),
    Sex = if_else(
      Maturity == "Unknown",
      "Unknown",
      Sex
    )
  ) |> 
  select(
    PlotDate, SetYear, GearFieldCode, Sex, Maturity, TotalCatch
  ) |> 
  group_by(
    PlotDate,
    GearFieldCode,
    Sex,
    Maturity
  ) |> 
  summarize(
    TotalCatch = sum( TotalCatch )
  ) |> 
  ungroup() |> 
  complete(
    PlotDate,
    GearFieldCode,
    Sex,
    Maturity,
    fill = list( TotalCatch = 0 )
  ) |> 
  filter(
    !( Sex %in% c( "Male", "Female" ) & Maturity == "Unknown" ),
    !( Sex == "Unknown" & Maturity %in% c( "Green", "Immature", "Ripe", "Spent" ) )
  ) |> 
  mutate(
    Classification = paste( Sex, "-", Maturity )
  ) |> 
  select(
    -c( Maturity, Sex )
  ) |> 
  pivot_wider(
    names_from = Classification,
    values_from = TotalCatch
  ) |> 
  rename(
    Date = PlotDate,
    Unknown = `Unknown - Unknown`
  ) |> 
  mutate(
    `Male - total` = `Male - Green` + `Male - Ripe` + `Male - Spent` + `Male - Immature`,
    `Female - total` = `Female - Green` + `Female - Ripe` + `Female - Spent` + `Female - Immature`,
    Total = `Male - total` + `Female - total` + Unknown
  ) |> 
  select(
    Date, GearFieldCode,
    `Female - Immature`, `Female - Green`, `Female - Ripe`, `Female - Spent`,
    `Male - Immature`, `Male - Green`, `Male - Ripe`, `Male - Spent`, 
    Unknown, `Male - total`, `Female - total`, Total
  ) |> 
  arrange(
    Date,
    rev( GearFieldCode )
  ) |> 
  # gt::gt()
  write.table(
    "clipboard",
    sep = "\t",
    row.names = FALSE
  )
```

# DAG

  * $C$ is the *total catch*
    - Derived as the sum of the *top net catch* ($T$) and *bottom net catch* ($B$)
  * $S$ is the *sex* of the individual
    - Male
    - Female
  * $M$ is the *maturity* of the individual
    - Immature
    - Green
    - Ripe
    - Spent
  * $P$ is the *spawning period*
    - Derived *post hoc* based on the presence of a spent individual
      * **Pre-spawn** = no spent fish in processed sample
      * **Spawning** = spent fish $\geq 1$ in processed sample
  * $E$ is the *sampling event*
    - Derived as the combined catch in a single night of sampling of a $10^{ \circ }$ grid
  * $U$ is the combined effect of *unidentified and unmeasured abiotic and biotic processes* that influence $P$
    - Environmental variables such as temperature, cumulative cold exposure, presence of a thermocline
    - Some potential social cue during aggregations

```{r}
DAG <- dagitty::dagitty(
          "dag {
            S [exposure]
            C [outcome]
            U [unobserved]
            U -> P <- E
            S -> C <- E
            S -> M -> C
            P -> M
          }"
        )

dagitty::coordinates( DAG ) <- list(
                                  x = c( 
                                    U = 1, P = 1, E = 1,
                                    M = 2, C = 2,
                                    S = 3
                                  ), 
                                  y = c( 
                                    U = 1.5, 
                                    P = 2, M = 2, S = 2,
                                    E = 3, C = 3 
                                  ) 
                                )

tiff( "Figure3_DAG.tiff", units = "in", width = 5, height = 4, res = 350 )

rethinking::drawdag( DAG, lwd = 2, cex = 1.5, radius = 3.5 )

dev.off()


```

## Prior predictive simulation

***Base linear structure***

$$logit( p ) = \bar{ \alpha } + z_{ E } \sigma_{ \alpha } + \beta_S S + \beta_P P$$

Weakly regularizing priors were selected for each model parameter where:

$$\beta_i \sim Normal( 0, 2 )$$

$$\bar{ \alpha } \sim( 0, 2 )$$

$$z_E \sim Normal( 0, 1 )$$

$$\sigma_{ \alpha } \sim Exponential( 1 )$$

```{r}
tibble(
  total_N = 10000
) |> 
  expand_grid(
    N = 1:total_N
  ) |> 
  mutate(
    b_S = rnorm( n = n(), mean = 0, sd = 2 ),
    b_P = rnorm( n = n(), mean = 0, sd = 2 ),
    a_bar = rnorm( n = n(), mean = 0, sd = 2 ),
    z_E = rnorm( n = n(), mean = 0, sd = 1 ),
    a_sigma = rexp( n = n(), rate = 1 ),
    logit_p_equation = a_bar + ( z_E * a_sigma ) + b_S + b_P,
    p_equation = brms::inv_logit_scaled( logit_p_equation ),
    logit_p_onelevel = a_bar + b_P,
    p_onelevel = brms::inv_logit_scaled( logit_p_onelevel )
  ) |> 
  select(
    a_bar:p_onelevel
  ) |> 
  pivot_longer(
    everything(),
    names_to = "Parameter",
    values_to = "Simulation"
  ) |> 
  ggplot(
    aes(
      x = Simulation
    )
  ) +
    geom_density(
      fill = "lightgrey"
    ) +
    theme_bw() +
    facet_wrap(
      ~ Parameter,
      scales = "free"
    )
```

## Simulate for testing

### S -> C

```{r}
S_to_C <- tibble(
            n_events = 10
          ) |> 
            expand_grid(
              E = 1:n_events,
              Sex = c( "Male", "Female" )
            ) |> 
            mutate(
              # ADJUST LEVELS HERE
              p = if_else(
                    Sex == "Male",
                    0.3,
                    0.7
                  ),
              C = round(
                    runif(
                      n = n(),
                      min = 5,
                      max = 1000
                    )
                  ),
              T = rbinom(
                    n = n(),
                    size = C,
                    prob = p
                  ),
              B = C - T
            )

library(brms)

S_to_C_test <- brm(
                data = S_to_C,
                family = binomial,
                T | trials( C ) ~ ( 1|E ) + Sex,
                prior = c(
                  prior(
                    normal( 0, 2 ), 
                    class = Intercept
                  ),
                  prior(
                    normal( 0, 2 ),
                    class = b
                  ),
                  prior(
                    exponential( 1 ),
                    class = sd
                  )
                ),
                iter = 2000,
                warmup = 1000,
                cores = 4,
                chains = 4,
                seed = 442,
                control = list(
                  adapt_delta = 0.89
                ),
                backend = "cmdstanr"
              )

S_to_C_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

### S -> C <- P

#### No interaction

```{r}
S_to_C_Pconst <- tibble(
                    n_events = 10
                  ) |> 
                    expand_grid(
                      E = 1:n_events,
                      Sex = c( "Male", "Female" )
                    ) |> 
                    mutate(
                      P = if_else(
                            E < round( n_events / 2 ),
                            "Pre-spawn",
                            "Spawn"
                          ),
                      # ADJUST LEVELS HERE
                      p = if_else(
                            Sex == "Male",
                            0.3,
                            0.7
                          ),
                      p = if_else(
                            P == "Spawn",
                            p - 0.15,
                            p
                          ),
                      C = round(
                            runif(
                              n = n(),
                              min = 5,
                              max = 1000
                            )
                          ),
                      T = rbinom(
                            n = n(),
                            size = C,
                            prob = p
                          ),
                      B = C - T
                    )

S_to_C_Pconst_test <- brm(
                        data = S_to_C_Pconst,
                        family = binomial,
                        T | trials( C ) ~ ( 1|E ) + Sex + P,
                        prior = c(
                          prior(
                            normal( 0, 2 ), 
                            class = Intercept
                          ),
                          prior(
                            normal( 0, 2 ),
                            class = b
                          ),
                          prior(
                            exponential( 1 ),
                            class = sd
                          )
                        ),
                        iter = 2000,
                        warmup = 1000,
                        cores = 4,
                        chains = 4,
                        seed = 442,
                        control = list(
                          adapt_delta = 0.89
                        ),
                        backend = "cmdstanr"
                      )

S_to_C_Pconst_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

#### With interaction

```{r}
S_to_C_Pvary <- tibble(
                    n_events = 10
                  ) |> 
                    expand_grid(
                      E = 1:n_events,
                      Sex = c( "Male", "Female" )
                    ) |> 
                    mutate(
                      P = if_else(
                              E < round( n_events / 2 ),
                              "Pre-spawn",
                              "Spawn"
                            ),
                      # ADJUST LEVELS HERE
                      p = if_else(
                            Sex == "Male",
                            0.3,
                            0.7
                          ),
                      p = case_when(
                            P == "Spawn" & Sex == "Female" ~ p - 0.1,
                            P == "Spawn" & Sex == "Male" ~ p - 0.2,
                            TRUE ~ p
                          ),
                      C = round(
                            runif(
                              n = n(),
                              min = 5,
                              max = 1000
                            )
                          ),
                      T = rbinom(
                            n = n(),
                            size = C,
                            prob = p
                          ),
                      B = C - T
                    )

S_to_C_Pvary_test <- brm(
                        data = S_to_C_Pvary,
                        family = binomial,
                        T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                        prior = c(
                          prior(
                            normal( 0, 2 ), 
                            class = Intercept
                          ),
                          prior(
                            normal( 0, 2 ),
                            class = b
                          ),
                          prior(
                            exponential( 1 ),
                            class = sd
                          )
                        ),
                        iter = 2000,
                        warmup = 1000,
                        cores = 4,
                        chains = 4,
                        seed = 442,
                        control = list(
                          adapt_delta = 0.89
                        ),
                        backend = "cmdstanr"
                      )

S_to_C_Pvary_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

#### Combined and evaluated with LOGO

```{r}
S_to_C_Pmix <- bind_rows(
                  S_to_C_Pconst |> 
                    mutate(
                      Model = "Const"
                    ),
                  S_to_C_Pvary |> 
                    mutate(
                      Model = "Interaction"
                    )
                ) |> 
                  mutate(
                    oldE = E,
                    E = factor(
                          paste0(
                            oldE, "-", Model
                          )
                        )
                  )

S_to_C_Pmix_NOint_test <- brm(
                            data = S_to_C_Pmix,
                            family = binomial,
                            T | trials( C ) ~ ( 1|E ) + Sex + P,
                            prior = c(
                              prior(
                                normal( 0, 2 ), 
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 442,
                            control = list(
                              adapt_delta = 0.89
                            ),
                            backend = "cmdstanr"
                          )

S_to_C_Pmix_int_test <- brm(
                          data = S_to_C_Pmix,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_C_Pmix_NOint_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_C_Pmix_int_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_C_Pmix_NOint_test_kfold <- S_to_C_Pmix_NOint_test |> 
                                  kfold(
                                    group = "E"
                                  )

S_to_C_Pmix_int_test_kfold <- S_to_C_Pmix_int_test |> 
                                kfold(
                                  group = "E"
                                )

# Function to group folds for correct Standard Error estimates from Aki's walkthrough - https://avehtari.github.io/modelselection/rats_kcv.html
cvgfix <- function( cv, cvidx ) {
              groupwise = numeric();
              K <- length( unique( cvidx ) )
              for ( i in 1:K ) { 
                groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
              }
              
              cv$pointwise <- cbind( elpd_kfolds = groupwise )
              cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
              cv$estimates[ 2 ] <- cv$se_elpd_kfold
              cv
          }

# Function to get proper fold layout to use in function
cvfolds_S_to_C_Pmix <- loo::kfold_split_grouped(
                          K = S_to_C_Pmix |> 
                            distinct(E) |> 
                            nrow(),
                          x = S_to_C_Pmix |> 
                            mutate(
                              # Remove any potential effect the levels might have on what happens next
                              E = factor(E)
                            ) |> 
                            pull(E)
                        )

S_to_C_Pmix_NOint_test_kfold_sefix <- S_to_C_Pmix_NOint_test_kfold |> 
                                        cvgfix(
                                            cvfolds_S_to_C_Pmix
                                          )

S_to_C_Pmix_int_test_kfold_sefix <- S_to_C_Pmix_int_test_kfold |> 
                                        cvgfix(
                                            cvfolds_S_to_C_Pmix
                                          )

S_to_C_Pmix_NOint_test_kfold_sefix_compare <- loo::loo_compare(
                                                list(
                                                  "No_Int" = S_to_C_Pmix_NOint_test_kfold_sefix,
                                                  "Int" = S_to_C_Pmix_int_test_kfold_sefix
                                                )
                                              )

S_to_C_Pmix_test_kfold_sefix_elpd <- cbind(
                                              "No_Int" =S_to_C_Pmix_NOint_test_kfold_sefix$pointwise[, "elpd_kfolds"],
                                              "Int" = S_to_C_Pmix_int_test_kfold_sefix$pointwise[, "elpd_kfolds"]
                                            )

S_to_C_Pmix_test_kfold_sefix_elpd_wt <- loo::stacking_weights( S_to_C_Pmix_test_kfold_sefix_elpd )

# Need to tease out draws relative to each weight
S_to_C_Pmix_NOint_test_paramwt <- S_to_C_Pmix_NOint_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_C_Pmix_test_kfold_sefix_elpd_wt[ 1 ] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_C_Pmix_NOint_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_C_Pmix_int_test_paramwt <- S_to_C_Pmix_int_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_C_Pmix_test_kfold_sefix_elpd_wt[ 2 ] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_C_Pmix_int_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_C_Pmix_ParamEsts_wt <- bind_rows(
                              S_to_C_Pmix_NOint_test_paramwt  |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PSpawn ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw ),
                              S_to_C_Pmix_int_test_paramwt |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PSpawn ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw )
                            )

S_to_C_Pmix_ParamEsts_wt |> 
  select(
    -c( .chain, .iteration, .draw )
  ) |> 
  posterior::summarise_draws()
```

### S -> M -> C

#### Test S

##### No interaction

```{r}
S_to_M_to_C <- tibble(
                  n_events = 10
                ) |> 
                  expand_grid(
                    E = 1:n_events,
                    Sex = c( "Male", "Female" ),
                    M = c( "Green", "Ripe" )
                  ) |> 
                  mutate(
                    # ADJUST LEVELS HERE
                    p = if_else(
                          Sex == "Male",
                          0.3,
                          0.7
                        ),
                    p = case_when(
                          Sex == "Male" & M == "Green" ~ p + 0.1,
                          Sex == "Male" & M == "Ripe" ~ p - 0.1,
                          Sex == "Female" & M == "Green" ~ p + 0.1,
                          Sex == "Female" & M == "Ripe" ~ p - 0.1
                        ),
                    C = round(
                          runif(
                            n = n(),
                            min = 5,
                            max = 1000
                          )
                        ),
                    T = rbinom(
                          n = n(),
                          size = C,
                          prob = p
                        ),
                    B = C - T
                  )

S_to_M_to_C_summary <- S_to_M_to_C |> 
                          group_by(
                            E,
                            Sex
                          ) |> 
                          summarize(
                            C = sum( C ),
                            T = sum( T )
                          )

S_to_M_to_C_testS <- brm(
                      data = S_to_M_to_C_summary,
                      family = binomial,
                      T | trials( C ) ~ ( 1|E ) + Sex,
                      prior = c(
                        prior(
                          normal( 0, 2 ), 
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 442,
                      control = list(
                        adapt_delta = 0.89
                      ),
                      backend = "cmdstanr"
                    )

S_to_M_to_C_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

##### Interaction ( S*M )

```{r}
S_to_Mv_to_C <- tibble(
                  n_events = 10
                ) |> 
                  expand_grid(
                    E = 1:n_events,
                    Sex = c( "Male", "Female" ),
                    M = c( "Green", "Ripe" )
                  ) |> 
                  mutate(
                    # ADJUST LEVELS HERE
                    p = if_else(
                          Sex == "Male",
                          0.3,
                          0.7
                        ),
                    p = case_when(
                          Sex == "Male" & M == "Green" ~ p + 0.1,
                          Sex == "Male" & M == "Ripe" ~ p - 0.1,
                          Sex == "Female" & M == "Green" ~ p + 0.2,
                          Sex == "Female" & M == "Ripe" ~ p - 0.2
                        ),
                    C = round(
                          runif(
                            n = n(),
                            min = 5,
                            max = 1000
                          )
                        ),
                    T = rbinom(
                          n = n(),
                          size = C,
                          prob = p
                        ),
                    B = C - T
                  )

S_to_Mv_to_C_summary <- S_to_Mv_to_C |> 
                          group_by(
                            E,
                            Sex
                          ) |> 
                          summarize(
                            C = sum( C ),
                            T = sum( T )
                          )

S_to_Mv_to_C_testS <- brm(
                        data = S_to_Mv_to_C_summary,
                        family = binomial,
                        T | trials( C ) ~ ( 1|E ) + Sex,
                        prior = c(
                          prior(
                            normal( 0, 2 ), 
                            class = Intercept
                          ),
                          prior(
                            normal( 0, 2 ),
                            class = b
                          ),
                          prior(
                            exponential( 1 ),
                            class = sd
                          )
                        ),
                        iter = 2000,
                        warmup = 1000,
                        cores = 4,
                        chains = 4,
                        seed = 442,
                        control = list(
                          adapt_delta = 0.89
                        ),
                        backend = "cmdstanr"
                      )

S_to_Mv_to_C_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

#### Test M

Using generated data from last section

##### No interaction

```{r}
S_to_M_to_C_Msummary <- S_to_M_to_C |> 
                          group_by(
                            E,
                            Sex,
                            M
                          ) |> 
                          summarize(
                            C = sum( C ),
                            T = sum( T )
                          )

S_to_M_to_C_testM <- brm(
                      data = S_to_M_to_C_Msummary,
                      family = binomial,
                      T | trials( C ) ~ ( 1|E ) + M + Sex,
                      prior = c(
                        prior(
                          normal( 0, 2 ), 
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 442,
                      control = list(
                        adapt_delta = 0.89
                      ),
                      backend = "cmdstanr"
                    )

S_to_M_to_C_testM |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_testMS <- brm(
                      data = S_to_M_to_C_Msummary,
                      family = binomial,
                      T | trials( C ) ~ ( 1|E ) + M + Sex + M*Sex,
                      prior = c(
                        prior(
                          normal( 0, 2 ), 
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 442,
                      control = list(
                        adapt_delta = 0.89
                      ),
                      backend = "cmdstanr"
                    )

S_to_M_to_C_testMS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe + `b_MRipe:SexMale` ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

##### Interaction ( S*M )

```{r}
S_to_Mv_to_C_Msummary <- S_to_Mv_to_C |> 
                          group_by(
                            E,
                            Sex,
                            M
                          ) |> 
                          summarize(
                            C = sum( C ),
                            T = sum( T )
                          )

S_to_Mv_to_C_testM <- brm(
                      data = S_to_Mv_to_C_Msummary,
                      family = binomial,
                      T | trials( C ) ~ ( 1|E ) + M + Sex,
                      prior = c(
                        prior(
                          normal( 0, 2 ), 
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 442,
                      control = list(
                        adapt_delta = 0.89
                      ),
                      backend = "cmdstanr"
                    )

S_to_Mv_to_C_testM |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # Not recovered

S_to_Mv_to_C_testMS <- brm(
                      data = S_to_Mv_to_C_Msummary,
                      family = binomial,
                      T | trials( C ) ~ ( 1|E ) + M + Sex + M*Sex,
                      prior = c(
                        prior(
                          normal( 0, 2 ), 
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 442,
                      control = list(
                        adapt_delta = 0.89
                      ),
                      backend = "cmdstanr"
                    )

S_to_Mv_to_C_testMS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe + `b_MRipe:SexMale` ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

##### Combined and evaluated with LOGO

```{r}
S_to_M_Cmix <- bind_rows(
                S_to_M_to_C_Msummary |> 
                  mutate(
                    Model = "Const"
                  ),
                S_to_Mv_to_C_Msummary |> 
                  mutate(
                    Model = "Interaction"
                  )
              ) |> 
                mutate(
                  oldE = E,
                  E = factor(
                        paste0(
                          oldE, "-", Model
                        )
                      )
                )

S_to_M_Cmix_NOint_test <- brm(
                            data = S_to_M_Cmix,
                            family = binomial,
                            T | trials( C ) ~ ( 1|E ) + M + Sex,
                            prior = c(
                              prior(
                                normal( 0, 2 ), 
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 442,
                            control = list(
                              adapt_delta = 0.89
                            ),
                            backend = "cmdstanr"
                          )

S_to_M_Cmix_int_test <- brm(
                          data = S_to_M_Cmix,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + M + Sex + M*Sex,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_M_Cmix_NOint_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_M_Cmix_int_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe + `b_MRipe:SexMale` ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_M_Cmix_NOint_test_kfold <- S_to_M_Cmix_NOint_test |> 
                                  kfold(
                                    group = "E"
                                  )

S_to_M_Cmix_int_test_kfold <- S_to_M_Cmix_int_test |> 
                                kfold(
                                  group = "E"
                                )

# Function to group folds for correct Standard Error estimates from Aki's walkthrough - https://avehtari.github.io/modelselection/rats_kcv.html
cvgfix <- function( cv, cvidx ) {
              groupwise = numeric();
              K <- length( unique( cvidx ) )
              for ( i in 1:K ) { 
                groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
              }
              
              cv$pointwise <- cbind( elpd_kfolds = groupwise )
              cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
              cv$estimates[ 2 ] <- cv$se_elpd_kfold
              cv
          }

# Function to get proper fold layout to use in function
cvfolds_S_to_M_Cmix <- loo::kfold_split_grouped(
                          K = S_to_M_Cmix |> 
                            ungroup() |> 
                            distinct(E) |> 
                            nrow(),
                          x = S_to_M_Cmix |> 
                            mutate(
                              # Remove any potential effect the levels might have on what happens next
                              E = factor(E)
                            ) |> 
                            pull(E)
                        )

S_to_M_Cmix_NOint_test_kfold_sefix <- S_to_M_Cmix_NOint_test_kfold |> 
                                        cvgfix(
                                          cvfolds_S_to_M_Cmix
                                        )

S_to_M_Cmix_int_test_kfold_sefix <- S_to_M_Cmix_int_test_kfold |> 
                                      cvgfix(
                                        cvfolds_S_to_M_Cmix
                                      )

S_to_M_Cmix_NOint_test_kfold_sefix_compare <- loo::loo_compare(
                                                list(
                                                  "No_Int" = S_to_M_Cmix_NOint_test_kfold_sefix,
                                                  "Int" = S_to_M_Cmix_int_test_kfold_sefix
                                                )
                                              )

S_to_M_Cmix_test_kfold_sefix_elpd <- cbind(
                                              "No_Int" = S_to_M_Cmix_NOint_test_kfold_sefix$pointwise[, "elpd_kfolds"],
                                              "Int" = S_to_M_Cmix_int_test_kfold_sefix$pointwise[, "elpd_kfolds"]
                                            )

S_to_M_Cmix_test_kfold_sefix_elpd_wt <- loo::stacking_weights( S_to_M_Cmix_test_kfold_sefix_elpd )

# Need to tease out draws relative to each weight
S_to_M_Cmix_NOint_test_paramwt <- S_to_M_Cmix_NOint_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_M_Cmix_test_kfold_sefix_elpd_wt[ 1 ] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_M_Cmix_NOint_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_M_Cmix_int_test_paramwt <- S_to_M_Cmix_int_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_M_Cmix_test_kfold_sefix_elpd_wt[ 2 ] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_M_Cmix_int_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_M_Cmix_ParamEsts_wt <- bind_rows(
                              S_to_M_Cmix_NOint_test_paramwt  |> 
                                mutate(
                                  p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_green = inv_logit_scaled( b_Intercept ),
                                  p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
                                  p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_male_green:p_top_female_ripe, .chain, .iteration, .draw ),
                              S_to_M_Cmix_int_test_paramwt |> 
                                mutate(
                                  p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_green = inv_logit_scaled( b_Intercept ),
                                  p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe + `b_MRipe:SexMale` ),
                                  p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_male_green:p_top_female_ripe, .chain, .iteration, .draw )
                            )

S_to_M_Cmix_ParamEsts_wt |> 
  select(
    -c( .chain, .iteration, .draw )
  ) |> 
  posterior::summarise_draws()
```

### S -> M -> C <- P

No maturity test is in here, since run separately for each P due to differing levels.

#### No interaction

```{r}
S_to_M_to_C_P <- tibble(
                    n_events = 10
                  ) |> 
                    expand_grid(
                      E = 1:n_events,
                      Sex = c( "Male", "Female" ),
                      M = c( "Green", "Ripe" ),
                      P = c( "Pre-Spawn", "Spawn" )
                    ) |> 
                    mutate(
                      # ADJUST LEVELS HERE
                      p = if_else(
                            Sex == "Male",
                            0.3,
                            0.7
                          ),
                      p = case_when(
                            Sex == "Male" & M == "Green" ~ p + 0.1,
                            Sex == "Male" & M == "Ripe" ~ p - 0.1,
                            Sex == "Female" & M == "Green" ~ p + 0.1,
                            Sex == "Female" & M == "Ripe" ~ p - 0.1
                          ),
                      p = if_else(
                            P == "Spawn",
                            p - 0.1,
                            p
                          ),
                      C = round(
                            runif(
                              n = n(),
                              min = 5,
                              max = 1000
                            )
                          ),
                      T = rbinom(
                            n = n(),
                            size = C,
                            prob = p
                          ),
                      B = C - T
                    )

S_to_M_to_C_P_summary <- S_to_M_to_C_P |> 
                            group_by(
                              E,
                              Sex,
                              P
                            ) |> 
                            summarize(
                              C = sum( C ),
                              T = sum( T )
                            )

S_to_M_to_C_P_testS <- brm(
                          data = S_to_M_to_C_P_summary,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + Sex + P,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_M_to_C_P_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_P_testSP <- brm(
                          data = S_to_M_to_C_P_summary,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_M_to_C_P_testSP |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # not recovered
```

#### Interaction ( S*P )

```{r}
S_to_M_to_C_Pvary <- tibble(
                        n_events = 10
                      ) |> 
                        expand_grid(
                          E = 1:n_events,
                          Sex = c( "Male", "Female" ),
                          M = c( "Green", "Ripe" ),
                          P = c( "Pre-Spawn", "Spawn" )
                        ) |> 
                        mutate(
                          # ADJUST LEVELS HERE
                          p = if_else(
                                Sex == "Male",
                                0.3,
                                0.7
                              ),
                          p = case_when(
                                Sex == "Male" & M == "Green" ~ p + 0.1,
                                Sex == "Male" & M == "Ripe" ~ p - 0.1,
                                Sex == "Female" & M == "Green" ~ p + 0.1,
                                Sex == "Female" & M == "Ripe" ~ p - 0.1
                              ),
                          p = case_when(
                                P == "Spawn" & Sex == "Male" ~ p - 0.1,
                                P == "Spawn" & Sex == "Female" ~ p - 0.2,
                                TRUE ~ p
                              ),
                          C = round(
                                runif(
                                  n = n(),
                                  min = 5,
                                  max = 1000
                                )
                              ),
                          T = rbinom(
                                n = n(),
                                size = C,
                                prob = p
                              ),
                          B = C - T
                        )

S_to_M_to_C_Pvary_summary <- S_to_M_to_C_Pvary |> 
                              group_by(
                                E,
                                Sex,
                                P
                              ) |> 
                              summarize(
                                C = sum( C ),
                                T = sum( T )
                              )

S_to_M_to_C_Pvary_testS <- brm(
                            data = S_to_M_to_C_Pvary_summary,
                            family = binomial,
                            T | trials( C ) ~ ( 1|E ) + Sex + P,
                            prior = c(
                              prior(
                                normal( 0, 2 ), 
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 442,
                            control = list(
                              adapt_delta = 0.89
                            ),
                            backend = "cmdstanr"
                          )

S_to_M_to_C_Pvary_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_Pvary_testSP <- brm(
                              data = S_to_M_to_C_Pvary_summary,
                              family = binomial,
                              T | trials(C) ~ (1|E) + Sex + P + Sex*P,
                              prior = c(
                                prior(
                                  normal( 0, 2 ), 
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 442,
                              control = list(
                                adapt_delta = 0.89
                              ),
                              backend = "cmdstanr"
                            )

S_to_M_to_C_Pvary_testSP |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

#### Interaction ( S*M )

```{r}
S_to_Mv_to_C_P <- tibble(
                    n_events = 10
                  ) |> 
                    expand_grid(
                      E = 1:n_events,
                      Sex = c( "Male", "Female" ),
                      M = c( "Green", "Ripe" ),
                      P = c( "Pre-Spawn", "Spawn" )
                    ) |> 
                    mutate(
                      # ADJUST LEVELS HERE
                      p = if_else(
                            Sex == "Male",
                            0.3,
                            0.7
                          ),
                      p = case_when(
                            Sex == "Male" & M == "Green" ~ p + 0.1,
                            Sex == "Male" & M == "Ripe" ~ p - 0.1,
                            Sex == "Female" & M == "Green" ~ p + 0.2,
                            Sex == "Female" & M == "Ripe" ~ p - 0.2
                          ),
                      p = case_when(
                          P == "Spawn" & Sex == "Male" ~ p - 0.1,
                          P == "Spawn" & Sex == "Female" ~ p - 0.1,
                          TRUE ~ p
                        ),
                      C = round(
                            runif(
                              n = n(),
                              min = 5,
                              max = 1000
                            )
                          ),
                      T = rbinom(
                            n = n(),
                            size = C,
                            prob = p
                          ),
                      B = C - T
                    )

S_to_Mv_to_C_P_summary <- S_to_Mv_to_C_P |> 
                            group_by(
                              E,
                              P,
                              Sex,
                              M
                            ) |> 
                            summarize(
                              C = sum( C ),
                              T = sum( T )
                            )

S_to_Mv_to_C_P_testS <- brm(
                          data = S_to_Mv_to_C_P_summary,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + Sex + P,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_Mv_to_C_P_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_Mv_to_C_P_testSP <- brm(
                          data = S_to_Mv_to_C_P_summary,
                          family = binomial,
                          T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                          prior = c(
                            prior(
                              normal( 0, 2 ), 
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          control = list(
                            adapt_delta = 0.89
                          ),
                          backend = "cmdstanr"
                        )

S_to_Mv_to_C_P_testSP |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

#### Interaction ( S * M * P )

```{r}
S_to_Mv_to_C_Pvary <- tibble(
                      n_events = 10
                    ) |> 
                      expand_grid(
                        E = 1:n_events,
                        Sex = c( "Male", "Female" ),
                        M = c( "Green", "Ripe" ),
                        P = c( "Pre-Spawn", "Spawn" )
                      ) |> 
                      mutate(
                        # ADJUST LEVELS HERE
                        p = if_else(
                              Sex == "Male",
                              0.3,
                              0.7
                            ),
                        p = case_when(
                              Sex == "Male" & M == "Green" ~ p + 0.1,
                              Sex == "Male" & M == "Ripe" ~ p - 0.1,
                              Sex == "Female" & M == "Green" ~ p + 0.2,
                              Sex == "Female" & M == "Ripe" ~ p - 0.2
                            ),
                        p = case_when(
                            P == "Spawn" & Sex == "Male" ~ p - 0.1,
                            P == "Spawn" & Sex == "Female" ~ p - 0.2,
                            TRUE ~ p
                          ),
                        C = round(
                              runif(
                                n = n(),
                                min = 5,
                                max = 1000
                              )
                            ),
                        T = rbinom(
                              n = n(),
                              size = C,
                              prob = p
                            ),
                        B = C - T
                      )

S_to_Mv_to_C_Pvary_summary <- S_to_Mv_to_C_Pvary |> 
                                group_by(
                                  E,
                                  P,
                                  Sex,
                                  M
                                ) |> 
                                summarize(
                                  C = sum( C ),
                                  T = sum( T )
                                )

S_to_Mv_to_C_Pvary_testS <- brm(
                              data = S_to_Mv_to_C_Pvary_summary,
                              family = binomial,
                              T | trials( C ) ~ ( 1|E ) + Sex + P,
                              prior = c(
                                prior(
                                  normal( 0, 2 ), 
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 442,
                              control = list(
                                adapt_delta = 0.89
                              ),
                              backend = "cmdstanr"
                            )

S_to_Mv_to_C_Pvary_testS |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_Mv_to_C_Pvary_testSP <- brm(
                              data = S_to_Mv_to_C_Pvary_summary,
                              family = binomial,
                              T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                              prior = c(
                                prior(
                                  normal( 0, 2 ), 
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 442,
                              control = list(
                                adapt_delta = 0.89
                              ),
                              backend = "cmdstanr"
                            )

S_to_Mv_to_C_Pvary_testSP |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

##### Combined and evaluated with LOGO

```{r}
S_to_M_to_C_Pmix <- bind_rows(
                      S_to_Mv_to_C_P |> 
                        mutate(
                          Model = "Const P"
                        ),
                      S_to_M_to_C_P |> 
                        mutate(
                          Model = "Const M & P"
                        ),
                      S_to_Mv_to_C_Pvary |> 
                        mutate(
                          Model = "Int P"
                        ),
                      S_to_M_to_C_Pvary |> 
                        mutate(
                          Model = "Int M & P"
                        )
                    ) |> 
                      mutate(
                        oldE = E,
                        E = factor(
                              paste0(
                                oldE, "-", Model
                              )
                            )
                      )

S_to_M_to_C_Pmix_summary <- S_to_M_to_C_Pmix |> 
                              group_by(
                                E,
                                P,
                                Sex
                              ) |> 
                              summarize(
                                C = sum( C ),
                                T = sum( T ),
                                B = sum( B ),
                                p = mean( p )
                              )

S_to_M_to_C_Pmix_NOint_test <- brm(
                                data = S_to_M_to_C_Pmix_summary,
                                family = binomial,
                                T | trials( C ) ~ ( 1|E ) + Sex + P,
                                prior = c(
                                  prior(
                                    normal( 0, 2 ), 
                                    class = Intercept
                                  ),
                                  prior(
                                    normal( 0, 2 ),
                                    class = b
                                  ),
                                  prior(
                                    exponential( 1 ),
                                    class = sd
                                  )
                                ),
                                iter = 2000,
                                warmup = 1000,
                                cores = 4,
                                chains = 4,
                                seed = 442,
                                control = list(
                                  adapt_delta = 0.89
                                ),
                                backend = "cmdstanr"
                              )

S_to_M_to_C_Pmix_int_test <- brm(
                              data = S_to_M_to_C_Pmix_summary,
                              family = binomial,
                              T | trials( C ) ~ ( 1|E ) + Sex + P + Sex*P,
                              prior = c(
                                prior(
                                  normal( 0, 2 ), 
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 442,
                              control = list(
                                adapt_delta = 0.89
                              ),
                              backend = "cmdstanr"
                            )

S_to_M_to_C_Pmix_NOint_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_M_to_C_Pmix_int_test |> 
  as_draws_df() |> 
  mutate(
    p_top_male_pre = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_pre = inv_logit_scaled( b_Intercept ),
    p_top_male_spawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` ),
    p_top_female_spawn = inv_logit_scaled( b_Intercept + b_PSpawn )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

S_to_M_to_C_Pmix_NOint_test_kfold <- S_to_M_to_C_Pmix_NOint_test |> 
                                        kfold(
                                          group = "E"
                                        )

S_to_M_to_C_Pmix_int_test_kfold <- S_to_M_to_C_Pmix_int_test |> 
                                      kfold(
                                        group = "E"
                                      )

# Function to group folds for correct Standard Error estimates from Aki's walkthrough
cvgfix <- function( cv, cvidx ) {
              groupwise = numeric();
              K <- length( unique( cvidx ) )
              for ( i in 1:K ) { 
                groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
              }
              
              cv$pointwise <- cbind( elpd_kfolds = groupwise )
              cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
              cv$estimates[ 2 ] <- cv$se_elpd_kfold
              cv
          }

# Function to get proper fold layout to use in function
cvfolds_S_to_M_to_C_Pmix <- loo::kfold_split_grouped(
                                K = S_to_M_to_C_Pmix_summary |> 
                                  ungroup() |> 
                                  distinct(E) |> 
                                  nrow(),
                                x = S_to_M_to_C_Pmix_summary |> 
                                  mutate(
                                    # Remove any potential effect the levels might have on what happens next
                                    E = factor(E)
                                  ) |> 
                                  pull(E)
                              )

S_to_M_to_C_Pmix_NOint_test_kfold_sefix <- S_to_M_to_C_Pmix_NOint_test_kfold |> 
                                            cvgfix(
                                                cvfolds_S_to_M_to_C_Pmix
                                              )

S_to_M_to_C_Pmix_int_test_kfold_sefix <- S_to_M_to_C_Pmix_int_test_kfold |> 
                                        cvgfix(
                                            cvfolds_S_to_M_to_C_Pmix
                                          )

S_to_M_to_C_Pmix_NOint_test_kfold_sefix_compare <- loo::loo_compare(
                                                list(
                                                  "No_Int" = S_to_M_to_C_Pmix_NOint_test_kfold_sefix,
                                                  "Int" = S_to_M_to_C_Pmix_int_test_kfold_sefix
                                                )
                                              )

S_to_M_to_C_Pmix_test_kfold_sefix_elpd <- cbind(
                                              "No_Int" = S_to_M_to_C_Pmix_NOint_test_kfold_sefix$pointwise[, "elpd_kfolds"],
                                              "Int" = S_to_M_to_C_Pmix_int_test_kfold_sefix$pointwise[, "elpd_kfolds"]
                                            )

S_to_M_to_C_Pmix_test_kfold_sefix_elpd_wt <- loo::stacking_weights( S_to_M_to_C_Pmix_test_kfold_sefix_elpd )

# Need to tease out draws relative to each weight
S_to_M_to_C_Pmix_NOint_test_paramwt <- S_to_M_to_C_Pmix_NOint_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_M_to_C_Pmix_test_kfold_sefix_elpd_wt[1] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_M_to_C_Pmix_NOint_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_M_to_C_Pmix_int_test_paramwt <- S_to_M_to_C_Pmix_int_test |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::sample_n(
                                      # First index is for no interaction
                                      size =  S_to_M_to_C_Pmix_test_kfold_sefix_elpd_wt[2] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( S_to_M_to_C_Pmix_int_test ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

S_to_M_to_C_Pmix_ParamEsts_wt <- bind_rows(
                              S_to_M_to_C_Pmix_NOint_test_paramwt  |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PSpawn ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw ),
                              S_to_M_to_C_Pmix_int_test_paramwt |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PSpawn ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PSpawn + `b_SexMale:PSpawn` )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw )
                            )

S_to_M_to_C_Pmix_ParamEsts_wt |> 
  select(
    -c( .chain, .iteration, .draw )
  ) |> 
  posterior::summarise_draws()
```

### MICE assignment and param recovery

#### S -> M -> C

```{r}
S_to_M_to_C <- tibble(
                  n_events = 1
                ) |> 
                  expand_grid(
                    E = 1:n_events,
                    Sex = c( "Male", "Female" ),
                    M = c( "Green", "Ripe" )
                  ) |> 
                  mutate(
                    # ADJUST LEVELS HERE
                    p = if_else(
                          Sex == "Male",
                          0.3,
                          0.7
                        ),
                    p = case_when(
                          Sex == "Male" & M == "Green" ~ p + 0.1,
                          Sex == "Male" & M == "Ripe" ~ p - 0.1,
                          Sex == "Female" & M == "Green" ~ p + 0.1,
                          Sex == "Female" & M == "Ripe" ~ p - 0.1
                        ),
                    C = round(
                          runif(
                            n = n(),
                            min = 5,
                            max = 1000
                          )
                        ),
                    T = rbinom(
                          n = n(),
                          size = C,
                          prob = p
                        ),
                    B = C - T
                  )

# Generate drop totals
S_to_M_to_C_drop <- S_to_M_to_C %>%
                      left_join(
                        . |> 
                          group_by(
                            E
                          ) |> 
                          summarize(
                            Total_T = sum( T ),
                            Total_B = sum( B )
                          ) |> 
                          mutate(
                            Drop_T = round( runif( n = n(), min = 1, max = round( Total_T / 2 ) ) ),
                            Drop_B = round( runif( n = n(), min = 1, max = round( Total_B / 2 ) ) ),
                            Keep_T = Total_T - Drop_T,
                            Keep_B = Total_B - Drop_B
                          ),
                        by = "E"
                      ) |> 
                      mutate(
                        Classify = paste(
                          Sex,
                          "-",
                          M
                        )
                      )

# Bottom
S_to_M_to_C_Bottom_Drop <- bind_rows(
                            S_to_M_to_C_drop |> 
                              select(
                                E,
                                Classify,
                                B,
                                Keep_B
                              ) |> 
                              uncount(
                                B
                              ) %>%
                              slice_sample(
                                n = . |> distinct( Keep_B ) |> pull( Keep_B )
                              ) |> 
                              select( 1:2 ),
                            S_to_M_to_C_drop |> 
                              distinct(
                                E,
                                Drop_B
                              ) |> 
                              uncount(
                                Drop_B
                              ) %>%
                              mutate(
                                Classify = NA
                              )
                          ) |> 
                          mutate(
                            Classify = as.factor( Classify ),
                            Mesh = round( runif( n = n(), min = 2, max = 4.5 ) ) # Random
                          )

library( mice )

S_to_M_to_C_Bottom_Drop_MICE <- mice(
                                  S_to_M_to_C_Bottom_Drop,
                                  m = 100,
                                  maxit = 1,
                                  method = "rf",
                                  visitSequence = c(
                                    "E", "Mesh", "Classify"
                                  ),
                                  seed = 442
                                ) |> 
                                complete(
                                  action = "long"
                                ) |> 
                                separate_wider_delim(
                                  Classify,
                                  delim = " - ",
                                  names = c( "Sex", "M" )
                                )

# Visualize original vs imputed
B_Orig_Sviz <- S_to_M_to_C |> 
                ggplot(
                  aes(
                    x = E,
                    y = B,
                    fill = Sex
                  )
                ) +
                  geom_col(
                    position = "stack",
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Sex",
                    y = "Bottom catch",
                    x = "Original",
                    title = "Original sample"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )

B_MICE_Sviz <- S_to_M_to_C_Bottom_Drop_MICE |> 
                ggplot(
                  aes(
                    x = factor( .imp ),
                    fill = Sex
                  )
                ) +
                  geom_bar(
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Sex",
                    y = "Bottom catch",
                    x = "Imputation",
                    title = "MICE RF imputation"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )
  
B_Orig_Sviz + B_MICE_Sviz + plot_layout( widths = c( 1, 25 ), guides = "collect" )

B_Orig_Mviz <- S_to_M_to_C |> 
                ggplot(
                  aes(
                    x = E,
                    y = B,
                    fill = interaction( Sex, M )
                  )
                ) +
                  geom_col(
                    position = "stack",
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Classification",
                    y = "Bottom catch",
                    x = "Original",
                    title = "Original sample"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )

B_MICE_Mviz <- S_to_M_to_C_Bottom_Drop_MICE |> 
                ggplot(
                  aes(
                    x = factor( .imp ),
                    fill = interaction( Sex, M )
                  )
                ) +
                  geom_bar(
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Classification",
                    y = "Bottom catch",
                    x = "Imputation",
                    title = "MICE RF imputation"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )
  
B_Orig_Mviz + B_MICE_Mviz + plot_layout( widths = c( 1, 25 ), guides = "collect" )

# Top
S_to_M_to_C_Top_Drop <- bind_rows(
                            S_to_M_to_C_drop |> 
                              select(
                                E,
                                Classify,
                                T,
                                Keep_T
                              ) |> 
                              uncount(
                                T
                              ) %>%
                              slice_sample(
                                n = . |> distinct( Keep_T ) |> pull( Keep_T )
                              ) |> 
                              select( 1:2 ),
                            S_to_M_to_C_drop |> 
                              distinct(
                                E,
                                Drop_T
                              ) |> 
                              uncount(
                                Drop_T
                              ) %>%
                              mutate(
                                Classify = NA
                              )
                          ) |> 
                          mutate(
                            Classify = as.factor( Classify ),
                            Mesh = round( runif( n = n(), min = 2, max = 4.5 ) ) # Random
                          )

S_to_M_to_C_Top_Drop_MICE <- mice(
                              S_to_M_to_C_Top_Drop,
                              m = 100,
                              maxit = 1,
                              method = "rf",
                              visitSequence = c(
                                "E", "Mesh", "Classify"
                              ),
                              seed = 442
                            ) |> 
                            complete(
                              action = "long"
                            ) |> 
                            separate_wider_delim(
                              Classify,
                              delim = " - ",
                              names = c( "Sex", "M" )
                            )

# Visualize original vs imputed
T_Orig_Sviz <- S_to_M_to_C |> 
                ggplot(
                  aes(
                    x = E,
                    y = T,
                    fill = Sex
                  )
                ) +
                  geom_col(
                    position = "stack",
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Sex",
                    y = "Bottom catch",
                    x = "Original",
                    title = "Original sample"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )

T_MICE_Sviz <- S_to_M_to_C_Top_Drop_MICE |> 
                ggplot(
                  aes(
                    x = factor( .imp ),
                    fill = Sex
                  )
                ) +
                  geom_bar(
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Sex",
                    y = "Bottom catch",
                    x = "Imputation",
                    title = "MICE RF imputation"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )
  
T_Orig_Sviz + T_MICE_Sviz + plot_layout( widths = c( 1, 25 ), guides = "collect" )

T_Orig_Mviz <- S_to_M_to_C |> 
                ggplot(
                  aes(
                    x = E,
                    y = T,
                    fill = interaction( Sex, M )
                  )
                ) +
                  geom_col(
                    position = "stack",
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Classification",
                    y = "Bottom catch",
                    x = "Original",
                    title = "Original sample"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )

T_MICE_Mviz <- S_to_M_to_C_Top_Drop_MICE |> 
                ggplot(
                  aes(
                    x = factor( .imp ),
                    fill = interaction( Sex, M )
                  )
                ) +
                  geom_bar(
                    color = "black"
                  ) +
                  theme_bw() +
                  labs(
                    fill = "Classification",
                    y = "Bottom catch",
                    x = "Imputation",
                    title = "MICE RF imputation"
                  ) +
                  scale_y_continuous(
                    expand = expansion(
                      mult = c( 0, 0 )
                    )
                  ) +
                  theme(
                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                  )
  
T_Orig_Mviz + T_MICE_Mviz + plot_layout( widths = c( 1, 25 ), guides = "collect" )

S_to_M_to_C_MICE <- bind_rows(
                      S_to_M_to_C_Bottom_Drop_MICE |> 
                        mutate(
                          Net = "Bottom"
                        ),
                      S_to_M_to_C_Top_Drop_MICE |> 
                        mutate(
                          Net = "Top"
                        )
                    )

S_to_M_to_C_MICE_Stot <- S_to_M_to_C |> 
                          group_by(
                            E,
                            Sex
                          ) |> 
                          summarize(
                            T = sum( T ),
                            B = sum( B ),
                            C = sum( C )
                          )

S_to_M_to_C_MICE_Sorig_brm <- brm(
                                data = S_to_M_to_C_MICE_Stot,
                                family = binomial,
                                T | trials( C ) ~ ( 1|E ) + Sex,
                                prior = c(
                                  prior(
                                    normal( 0, 2 ), 
                                    class = Intercept
                                  ),
                                  prior(
                                    normal( 0, 2 ),
                                    class = b
                                  ),
                                  prior(
                                    exponential( 1 ),
                                    class = sd
                                  )
                                ),
                                iter = 2000,
                                warmup = 1000,
                                cores = 4,
                                chains = 4,
                                seed = 442,
                                control = list(
                                  adapt_delta = 0.95
                                ),
                                backend = "cmdstanr"
                              )

S_to_M_to_C_MICE_Ssum_list <- S_to_M_to_C_MICE |> 
                                group_by(
                                  .imp,
                                  Sex,
                                  Net
                                ) |> 
                                summarize(
                                  Catch = n()
                                ) |> 
                                ungroup() |> 
                                pivot_wider(
                                  names_from = Net,
                                  values_from = Catch
                                ) |> 
                                rename(
                                  B = Bottom,
                                  T = Top
                                ) |> 
                                mutate(
                                  .imp = factor( .imp ),
                                  C = B + T,
                                  E = "1"
                                ) |>
                                group_by(
                                  .imp
                                ) |> 
                                nest() |> 
                                deframe()

S_to_M_to_C_MICE_S_brm <- brm_multiple(
                            data = S_to_M_to_C_MICE_Ssum_list,
                            family = binomial,
                            T | trials( C ) ~ ( 1|E ) + Sex,
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 152,
                            prior = c(
                              prior(
                                normal( 0, 2 ),
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            control = list(
                              adapt_delta = 0.95
                            ),
                            backend = "cmdstanr",
                            sample_prior = TRUE,
                            save_pars = save_pars(all = T),
                            combine = TRUE
                          ) # rhat should be evaluated within each model, not aggregate 

S_to_M_to_C_MICE_Sorig_brm |> 
  as_draws_df() |> 
  mutate(
    p_top_male = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_MICE_S_brm |> 
  as_draws_df() |> 
  mutate(
    p_top_male = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_MICE_Mtot <- S_to_M_to_C |> 
                          group_by(
                            E,
                            Sex,
                            M
                          ) |> 
                          summarize(
                            T = sum( T ),
                            B = sum( B ),
                            C = sum( C )
                          )

S_to_M_to_C_MICE_Morig_brm <- brm(
                                data = S_to_M_to_C_MICE_Mtot,
                                family = binomial,
                                T | trials( C ) ~ ( 1|E ) + M + Sex,
                                prior = c(
                                  prior(
                                    normal( 0, 2 ), 
                                    class = Intercept
                                  ),
                                  prior(
                                    normal( 0, 2 ),
                                    class = b
                                  ),
                                  prior(
                                    exponential( 1 ),
                                    class = sd
                                  )
                                ),
                                iter = 2000,
                                warmup = 1000,
                                cores = 4,
                                chains = 4,
                                seed = 442,
                                control = list(
                                  adapt_delta = 0.95
                                ),
                                backend = "cmdstanr"
                              )

S_to_M_to_C_MICE_Msum_list <- S_to_M_to_C_MICE |> 
                                group_by(
                                  .imp,
                                  Sex,
                                  M,
                                  Net
                                ) |> 
                                summarize(
                                  Catch = n()
                                ) |> 
                                ungroup() |> 
                                pivot_wider(
                                  names_from = Net,
                                  values_from = Catch
                                ) |> 
                                rename(
                                  B = Bottom,
                                  T = Top
                                ) |> 
                                mutate(
                                  .imp = factor( .imp ),
                                  C = B + T,
                                  E = "1"
                                ) |>
                                group_by(
                                  .imp
                                ) |> 
                                nest() |> 
                                deframe()

S_to_M_to_C_MICE_M_brm <- brm_multiple(
                            data = S_to_M_to_C_MICE_Msum_list,
                            family = binomial,
                            T | trials( C ) ~ ( 1|E ) + M + Sex,
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 152,
                            prior = c(
                              prior(
                                normal( 0, 2 ),
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            control = list(
                              adapt_delta = 0.95
                            ),
                            backend = "cmdstanr",
                            sample_prior = TRUE,
                            save_pars = save_pars(all = T),
                            combine = TRUE
                          ) # rhat should be evaluated within each model, not aggregate 

S_to_M_to_C_MICE_Morig_brm |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered

S_to_M_to_C_MICE_M_brm |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MRipe ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  ) # recovered
```

# Test on real data with missing data (no imputation)

## Evaluate S -> C

### Build model

```{r}
library(brms)

analyzedatabysex <- analyzedata |> 
                      mutate(
                        SampleDate = if_else(
                          SampleDate == "2022-12-07" & Grid == 1208,
                          "2022-12-06",
                          SampleDate
                        )
                      ) |> 
                      filter(
                        Total > 0
                      ) |> 
                      group_by(
                        SampleDate,
                        Grid,
                        Spawn,
                        SetYear,
                        Sex
                      ) |> 
                      summarize(
                        Bottom = sum( Bottom, na.rm = TRUE ),
                        Top = sum( Top, na.rm = TRUE ),
                        Total = sum( Total, na.rm = TRUE )
                      )
  
Sex_NOinteraction <- brm(
                      data = analyzedatabysex,
                      family = binomial,
                      Top | trials( Total ) ~ ( 1|SampleDate ) + Sex + Spawn,
                      iter = 2000,
                      warmup = 1000,
                      cores = 4,
                      chains = 4,
                      seed = 152,
                      prior = c(
                        prior(
                          normal( 0, 2 ),
                          class = Intercept
                        ),
                        prior(
                          normal( 0, 2 ),
                          class = b
                        ),
                        prior(
                          exponential( 1 ),
                          class = sd
                        )
                      ),
                      control = list(
                        adapt_delta = 0.95
                      ),
                      backend = "cmdstanr",
                      sample_prior = TRUE,
                      save_pars = save_pars(all = T),
                      file = "Sex_NOinteraction"
                    )

Sex_interaction <- brm(
                    data = analyzedatabysex,
                    family = binomial,
                    Top | trials( Total ) ~ ( 1|SampleDate ) + Sex + Spawn + Sex*Spawn,
                    iter = 2000,
                    warmup = 1000,
                    cores = 4,
                    chains = 4,
                    seed = 442,
                    prior = c(
                      prior(
                        normal( 0, 2 ),
                        class = Intercept
                      ),
                      prior(
                        normal( 0, 2 ),
                        class = b
                      ),
                      prior(
                        exponential( 1 ),
                        class = sd
                      )
                    ),
                    control = list(
                      adapt_delta = 0.95
                    ),
                    backend = "cmdstanr",
                    sample_prior = TRUE,
                    save_pars = save_pars(all = T),
                    file = "Sex_interaction"
                  )
```

#### Model diagnostics

```{r}
# Numerical

Sex_NOinteraction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_SpawnBefore ),
    p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_SpawnBefore ),
    p_top_female_spawning = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

Sex_interaction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_SpawnBefore + `b_SexMale:SpawnBefore` ),
    p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_SpawnBefore ),
    p_top_female_spawning = inv_logit_scaled( b_Intercept )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

# Trace plots

as_draws_df(
    Sex_NOinteraction
  ) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

as_draws_df(
    Sex_interaction
  ) |>
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

# Trace rank

as_draws_df(
    Sex_NOinteraction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()

as_draws_df(
    Sex_interaction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()
```

#### Posterior prediction

```{r}
analyzedatabysex_plot <- analyzedatabysex |> 
                          filter(
                            !( is.na( Total ) )
                          ) |> 
                          mutate(
                            case = factor(
                              1:length( Sex )
                            ),
                            Label = paste0(
                              SampleDate,
                              "-",
                              substr(
                                Sex,
                                start = 1,
                                stop = 1
                              )
                            )
                          )

predictionSex_NOinteraction <- predict( Sex_NOinteraction ) |> 
                                as_tibble() |> 
                                bind_cols(
                                  analyzedatabysex_plot
                                )

analyzedatabysex_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionSex_NOinteraction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Spawn
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedatabysex_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - sex with no interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )

predictionSex_interaction <- predict( Sex_interaction ) |> 
                                as_tibble() |> 
                                bind_cols(
                                  analyzedatabysex_plot
                                )

analyzedatabysex_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionSex_interaction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Spawn
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedatabysex_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - sex with interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )
```

#### LOGO-CV evaluation

```{r}
Sex_NOinteraction_kfold <- kfold(
                              Sex_NOinteraction,
                              group = "SampleDate"
                            )

Sex_interaction_kfold <- kfold(
                            Sex_interaction,
                            group = "SampleDate"
                          )

# The SE of the elpd differences (se_diff) was computed without taking into account the grouping structure. A more accurate SE estimate could be obtained by first computing the group specific elpds - https://avehtari.github.io/modelselection/rats_kcv.html

cvgfix <- function( cv, cvidx ) {
  
              groupwise = numeric();
              K <- length( unique( cvidx ) )
              for ( i in 1:K ) { 
                groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
              }
              
              cv$pointwise <- cbind( elpd_kfolds = groupwise )
              cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
              cv$estimates[ 2 ] <- cv$se_elpd_kfold
              cv
          }

Scvfolds <- loo::kfold_split_grouped(
              K = analyzedatabysex |> 
                distinct( SampleDate ) |> 
                nrow(),
              x = analyzedatabysex |> 
                pull( SampleDate )
            )

Sex_NOinteraction_kfold_sefix <- cvgfix( Sex_NOinteraction_kfold, Scvfolds )
Sex_interaction_kfold_sefix <- cvgfix( Sex_interaction_kfold, Scvfolds )

# View LOGO difference
loo::loo_compare(
  Sex_NOinteraction_kfold_sefix,
  Sex_interaction_kfold_sefix
)

Skfold_single_sefix_elpd <- cbind(
                              "NOint" = Sex_NOinteraction_kfold_sefix$pointwise[, "elpd_kfolds"],
                              "Int" = Sex_interaction_kfold_sefix$pointwise[, "elpd_kfolds"]
                            )

Skfold_single_sefix_elpd_wt <- loo::stacking_weights( Skfold_single_sefix_elpd )

# View stacking weights
Skfold_single_sefix_elpd_wt

# Need to tease out draws in proportion to each weight
Sex_NOinteraction_paramwt <- Sex_NOinteraction |> 
                              as_draws_df() |> 
                              tibble() |> 
                              # Select weighted number of draws without replacement
                              dplyr::slice_sample(
                                n =  Skfold_single_sefix_elpd_wt[1] |> 
                                  tibble() |> 
                                  rename(
                                    Weight = everything()
                                  ) |> 
                                  mutate(
                                    Draws = round(
                                      Weight * nrow( as_draws_df( Sex_NOinteraction ) )
                                    )
                                  ) |> 
                                  pull(
                                    Draws
                                  ),
                                replace = FALSE
                              )

Sex_interaction_paramwt <- Sex_interaction |> 
                            as_draws_df() |> 
                            tibble() |> 
                            # Select weighted number of draws without replacement
                            dplyr::slice_sample(
                              # First index is for no interaction
                              n =  Skfold_single_sefix_elpd_wt[2] |> 
                                tibble() |> 
                                rename(
                                  Weight = everything()
                                ) |> 
                                mutate(
                                  Draws = round(
                                    Weight * nrow( as_draws_df( Sex_interaction ) )
                                  )
                                ) |> 
                                pull(
                                  Draws
                                ),
                              replace = FALSE
                            )

Sex_ParamEsts_wt <- bind_rows(
                      Sex_NOinteraction_paramwt  |> 
                        mutate(
                          p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_SpawnBefore ),
                          p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_SpawnBefore ),
                          p_top_female_spawning = inv_logit_scaled( b_Intercept ),
                          p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale )
                        ) |> 
                        as_tibble()  |> 
                        select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw ),
                      Sex_interaction_paramwt |> 
                        mutate(
                          p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_SpawnBefore ),
                          p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_SpawnBefore + `b_SexMale:SpawnBefore` ),
                          p_top_female_spawning = inv_logit_scaled( b_Intercept ),
                          p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale )
                        ) |> 
                        as_tibble()  |> 
                        select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw )
                    )
```

### Stacked probability parameter visualization

```{r}
# Visualization of linear predictor posterior
Sex_ParamEsts_wt |> 
  pivot_longer(
    c( p_top_female_prespawn:p_top_male_spawning ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  mutate(
    Period = if_else(
      Parameter %in% c( "p_top_female_prespawn", "p_top_male_prespawn" ),
      "Pre-spawn",
      "Spawning"
    ),
    Sex = if_else(
      Parameter %in% c( "p_top_male_prespawn", "p_top_male_spawning" ),
      "Male",
      "Female"
    ),
    across(
      c( Parameter, Period, Sex ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      fill = Period,
      color = Period
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0.50
      ),
      linetype = "dashed"
    ) +
    geom_vline(
      aes(
        xintercept = 0.67
      ),
      linetype = "dotted"
    ) +
    geom_vline(
      aes(
        xintercept = 0.33
      ),
      linetype = "dotted"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      cols = vars( Sex ),
      scales = "free_y"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.945 )
    ) +
    scale_color_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_fill_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch )",
      limits = c( 0 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()
```

### Hypothesis Support

```{r}
ROPE_Ssummary_stack <- bind_rows(
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_prespawn:p_top_male_prespawn
                          ) |> 
                          bayestestR::rope(
                            range = c( 0, 0.33 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Pre-spawn",
                            Hypothesis = "Bottom"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_prespawn:p_top_male_prespawn
                          ) |> 
                          bayestestR::rope(
                            range = c( 0.33, 0.67 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Pre-spawn",
                            Hypothesis = "Middle"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_prespawn:p_top_male_prespawn
                          ) |> 
                          bayestestR::rope(
                            range = c( 0.67, 1 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Pre-spawn",
                            Hypothesis = "Top"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_prespawn:p_top_male_prespawn
                          ) |> 
                          bayestestR::rope(
                            range = c( 0.5, 1 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Pre-spawn",
                            Hypothesis = "p > 0.5"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_spawning:p_top_male_spawning
                          ) |> 
                          bayestestR::rope(
                            range = c( 0, 0.33 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Spawning",
                            Hypothesis = "Bottom"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_spawning:p_top_male_spawning
                          ) |> 
                          bayestestR::rope(
                            range = c( 0.33, 0.67 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Spawning",
                            Hypothesis = "Middle"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_spawning:p_top_male_spawning
                          ) |> 
                          bayestestR::rope(
                            range = c( 0.67, 1 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Spawning",
                            Hypothesis = "Top"
                          ),
                        Sex_ParamEsts_wt |> 
                          select(
                            p_top_female_spawning:p_top_male_spawning
                          ) |>  
                          bayestestR::rope(
                            range = c( 0.5, 1 ),
                            ci = 1
                          ) |> 
                          as_tibble() |> 
                          mutate(
                            Period = "Spawning",
                            Hypothesis = "p > 0.5"
                          )
                      ) |> 
                      select( Parameter, ROPE_Percentage:Hypothesis ) |> 
                      pivot_wider(
                        names_from = Hypothesis,
                        values_from = ROPE_Percentage
                      ) |> 
                      mutate(
                        Sex = if_else(
                          grepl( "female", tolower( Parameter ) ),
                          "Female",
                          "Male"
                        )
                      ) |> 
                      select(
                        Sex,
                        Period,
                        Bottom:`p > 0.5`
                      ) |> 
                      arrange(
                        Sex,
                        Period
                      )

ROPE_Ssummary_stack |> 
  gt::gt()

ROPE_Ssummary_stack |> 
  pivot_longer(
    Bottom:Top,
    names_to = "Hypothesis",
    values_to = "Support"
  ) |> 
  mutate(
    Hypothesis = case_when(
      Hypothesis == "Middle" ~ "H0",
      Hypothesis == "Bottom" ~ "H1",
      Hypothesis == "Top" ~ "H2"
    )
  ) |> 
  ggplot(
    aes(
        x = Period,
        y = Support,
        fill = Hypothesis,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      cols = vars(Sex),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      labels = c(
        "H0" = bquote( italic(H)[italic('0')]~'- no bias' ),
        "H1" = bquote(italic(H)[italic('1')]~'- bottom net bias' ),
        "H2" = bquote( italic(H)[italic('2')]~'- top net bias' )
      ),
      discrete = TRUE,
      option = "G"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

## Simulate predictive distribution

### Generate distribution

```{r}
Sex_NOinteraction_pred <- Sex_NOinteraction |> 
                            tidybayes::predicted_draws(
                              newdata = expand_grid(
                                Sex = c( "Female", "Male" ),
                                Spawn = c( "Before", "After" ),
                                Total = 1000,
                                SampleDate = NA,
                                Prediction = 1:100
                              ),
                              re_formula = NULL
                            )

Sex_interaction_pred <- Sex_interaction |> 
                          tidybayes::predicted_draws(
                            newdata = expand_grid(
                              Sex = c( "Female", "Male" ),
                              Spawn = c( "Before", "After" ),
                              Total = 1000,
                              SampleDate = NA,
                              Prediction = 1:100
                            ),
                            re_formula = NULL
                          )

Sex_NOinteraction_pred_wt <- Sex_NOinteraction_pred |> 
                              tibble() |> 
                              ungroup() |> 
                              mutate(
                                Div = paste0( Sex, "_", Spawn )
                              ) |> 
                              select(
                                -c( .row, Sex, Spawn )
                              ) |> 
                              pivot_wider(
                                names_from = "Div",
                                values_from = ".prediction"
                              ) |> 
                              # Select weighted number of draws without replacement
                              dplyr::slice_sample(
                                # First index is for no interaction
                                n =  Skfold_single_sefix_elpd_wt[1] |> 
                                  tibble() |> 
                                  rename(
                                    Weight = everything()
                                  ) |> 
                                  mutate(
                                    Draws = round(
                                      Weight * max( tibble( Sex_NOinteraction_pred )$.draw )
                                    )
                                  ) |> 
                                  pull(
                                    Draws
                                  ),
                                replace = FALSE,
                                by = Prediction
                              ) |>
                              mutate(
                                Model = "No int"
                              )

Sex_interaction_pred_wt <- Sex_interaction_pred |> 
                              tibble() |> 
                              ungroup() |> 
                              mutate(
                                Div = paste0( Sex, "_", Spawn )
                              ) |> 
                              select(
                                -c( .row, Sex, Spawn )
                              ) |> 
                              pivot_wider(
                                names_from = "Div",
                                values_from = ".prediction"
                              ) |> 
                              # Select weighted number of draws without replacement
                              dplyr::slice_sample(
                                # First index is for no interaction
                                n =  Skfold_single_sefix_elpd_wt[2] |> 
                                  tibble() |> 
                                  rename(
                                    Weight = everything()
                                  ) |> 
                                  mutate(
                                    Draws = round(
                                      Weight * max( tibble( Sex_interaction_pred )$.draw )
                                    )
                                  ) |> 
                                  pull(
                                    Draws
                                  ),
                                replace = FALSE,
                                by = Prediction
                              ) |>
                              mutate(
                                Model = "Int"
                              )

sex_1000predict <- bind_rows(
                      Sex_NOinteraction_pred_wt,
                      Sex_interaction_pred_wt
                    ) |> 
                      rename(
                        PredictionNum = Prediction
                      ) |> 
                      pivot_longer(
                        Female_Before:Male_After,
                        names_to = "Div",
                        values_to = "Prediction"
                      ) |> 
                      separate_wider_delim(
                        cols = Div,
                        delim = "_",
                        names = c("Sex", "Period")
                      ) |> 
                      pivot_wider(
                        names_from = Sex,
                        values_from = Prediction
                      ) |> 
                      mutate(
                        `Female:Male` = Female / Male,
                        `Female:Male` = if_else(
                          Male == 0,
                          Female,
                          `Female:Male`
                        ),
                        `Female:Male` = if_else(
                          Female == 0,
                          ( 1 / Male ),
                          `Female:Male`
                        ),
                        `Female:Male` = if_else(
                          Female == 0 & Male == 0,
                          1,
                          `Female:Male`
                        )
                      )

# saveRDS( sex_1000predict, "sex_1000predict.rds" )
# 
# sex_1000predict <- readRDS( "sex_1000predict.rds" )

sex_1000predict |> 
  filter(
    Period == "Before",
    Model == "No int"
  ) |> 
  select(
    Female,
    Male,
    `Female:Male`
  ) |> 
  posterior::summarize_draws()

sex_1000predict |> 
  filter(
    Period == "Before",
    Model == "Int"
  ) |> 
  select(
    Female,
    Male,
    `Female:Male`
  ) |> 
  posterior::summarize_draws()

sex_1000predict |> 
  filter(
    Period == "After",
    Model == "No int"
  ) |> 
  select(
    Female,
    Male,
    `Female:Male`
  ) |> 
  posterior::summarize_draws()

sex_1000predict |> 
  filter(
    Period == "After",
    Model == "Int"
  ) |> 
  select(
    Female,
    Male,
    `Female:Male`
  ) |> 
  posterior::summarize_draws()
```

### Visualize distribution

```{r}
# Visualization of posterior predictive distribution
sex_1000predict |> 
  ungroup() |> 
  ggplot(
    aes(
      x = `Female:Male`,
      y = Period,
      fill = after_stat( x )
    )
  ) +
    ggdist::stat_slab(
      aes(
        color = after_stat( x )
      ),
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      limits = c( 0, 200 ),
      linewidth = 0.25
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      limits = c( 0, 200 ),
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      xintercept = 1,
      linetype = "dashed",
      linewidth = 1
    ) +
    geom_vline(
      xintercept = 2,
      linetype = "dotted",
      linewidth = 1
    ) +
    geom_vline(
      xintercept = 0.5,
      linetype = "dotted",
      linewidth = 1
    ) +
    theme_bw() +
    coord_trans( x = 'log10' ) +
    scale_x_continuous(
      expression( italic( "T*" )~"Female:Male" ),
      breaks = c( 0, 0.1, 0.2, 0.5, 1, 2, 5, 10, 25, 50, 100, 200 )
    ) +
    labs(
      y = ""
    ) +
    theme(
      legend.position = "none",
      text = element_text(
        size = 20
      )
    ) + 
    scale_fill_gradient2(
      low = "#558aa6",
      mid = "#D7263D",
      high = "#D7263D",
      na.value = "#D7263D",
      midpoint = 2.5,
      limits = c( NA, 3 )
    ) +
    scale_color_gradient2(
      low = "#558aa6",
      mid = "#D7263D",
      high = "#D7263D",
      na.value = "#D7263D",
      midpoint = 2.5,
      limits = c( NA, 3 )
    )
```

### Hypothesis support

```{r}
ROPE_summary_sexratio <- bind_rows(
                          sex_1000predict |> 
                            filter(
                              Period == "Before"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.5, 2 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Null"
                            ),
                          sex_1000predict |> 
                            filter(
                              Period == "Before"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.5 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Male bias"
                            ),
                          sex_1000predict |> 
                            filter(
                              Period == "Before"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 2, 1000 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Female bias"
                            ),
                          sex_1000predict |> 
                            filter(
                              Period == "After"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.5, 2 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Null"
                            ),
                          sex_1000predict |> 
                            filter(
                              Period == "After"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.5 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Male bias"
                            ),
                          sex_1000predict |> 
                            filter(
                              Period == "After"
                            ) |> 
                            select(
                              `Female:Male`
                            ) |> 
                            bayestestR::rope(
                              range = c( 2, 1000 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Female bias"
                            )
                        ) |> 
                        select( Parameter, ROPE_Percentage:Hypothesis ) |> 
                        pivot_wider(
                          names_from = Hypothesis,
                          values_from = ROPE_Percentage
                        ) |> 
                        arrange(
                          Period
                        )

ROPE_summary_sexratio |> 
  gt::gt()

ROPE_summary_sexratio |> 
  pivot_longer(
    Null:`Female bias`,
    names_to = "Hypothesis",
    values_to = "Support"
  ) |> 
  mutate(
    Hypothesis = case_when(
      Hypothesis == "Null" ~ "H0",
      Hypothesis == "Male bias" ~ "H1",
      Hypothesis == "Female bias" ~ "H2"
    )
  ) |> 
  ggplot(
    aes(
        x = Hypothesis,
        y = Support,
        fill = Hypothesis,
        label = scales::percent( Support, accuracy = 1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      cols = vars(Period),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      limits = c( 0, 1 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_discrete(
      "",
      labels = c( expression( italic(H)[0] ), expression( italic(H)[1] ), expression( italic(H)[2] ) )
    ) +
    viridis::scale_fill_viridis(
      labels = c(
        "H0" = bquote(italic(H)[italic('0')]~'- no bias'),
        "H1" = bquote(italic(H)[italic('1')]~'- male bias'),
        "H2" = bquote(italic(H)[italic('2')]~'- female bias')
      ),
      discrete = TRUE,
      option = "D"
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

## Evaluate M -> C

### Build model

```{r}
library(brms)

analyzedatabyMat <- analyzedata |> 
                      mutate(
                        SampleDate = if_else(
                          SampleDate == "2022-12-07" & Grid == 1208,
                          "2022-12-06",
                          SampleDate
                        )
                      ) |> 
                      filter(
                        Total > 0
                      ) |> 
                      group_by(
                        SampleDate,
                        Grid,
                        Spawn,
                        SetYear,
                        Sex,
                        Maturity
                      ) |> 
                      summarize(
                        Bottom = sum( Bottom, na.rm = TRUE ),
                        Top = sum( Top, na.rm = TRUE ),
                        Total = sum( Total, na.rm = TRUE )
                      )
  
analyzedatabyMat_before <- analyzedatabyMat |> 
                            filter(
                              Spawn == "Before"
                            )

analyzedatabyMat_after <- analyzedatabyMat |> 
                            filter(
                              Spawn == "After"
                            )

Mat_before_NOinteraction <- brm(
                              data = analyzedatabyMat_before,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|SampleDate ) + Maturity + Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars(all = T),
                              file = "Mat_before_NOinteraction"
                            )

Mat_before_interaction <- brm(
                            data = analyzedatabyMat_before,
                            family = binomial,
                            Top | trials( Total ) ~ ( 1|SampleDate ) + Maturity + Sex + Maturity*Sex,
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 442,
                            prior = c(
                              prior(
                                normal( 0, 2 ),
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            control = list(
                              adapt_delta = 0.95
                            ),
                            backend = "cmdstanr",
                            sample_prior = TRUE,
                            save_pars = save_pars(all = T),
                            file = "Mat_before_interaction"
                          )

Mat_after_NOinteraction <- brm(
                              data = analyzedatabyMat_after,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|SampleDate ) + Maturity + Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars(all = T),
                              file = "Mat_after_NOinteraction"
                            )

Mat_after_interaction <- brm(
                            data = analyzedatabyMat_after,
                            family = binomial,
                            Top | trials( Total ) ~ ( 1|SampleDate ) + Maturity + Sex + Maturity*Sex,
                            iter = 2000,
                            warmup = 1000,
                            cores = 4,
                            chains = 4,
                            seed = 442,
                            prior = c(
                              prior(
                                normal( 0, 2 ),
                                class = Intercept
                              ),
                              prior(
                                normal( 0, 2 ),
                                class = b
                              ),
                              prior(
                                exponential( 1 ),
                                class = sd
                              )
                            ),
                            control = list(
                              adapt_delta = 0.95
                            ),
                            backend = "cmdstanr",
                            sample_prior = TRUE,
                            save_pars = save_pars(all = T),
                            file = "Mat_after_interaction"
                          )
```

#### Model diagnostics

```{r}
# Numerical

Mat_before_NOinteraction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

Mat_before_interaction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

Mat_after_NOinteraction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
    p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
    p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent )
  ) |> 
  posterior::summarize_draws() |> # filter( rhat > 1.01 )
  print(
    n = 100
  )

Mat_after_interaction |> 
  as_draws_df() |> 
  mutate(
    p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
    p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
    p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent + `b_MaturitySpent:SexMale` ),
    p_top_female_green = inv_logit_scaled( b_Intercept ),
    p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
    p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent )
  ) |> 
  posterior::summarize_draws() |> 
  print(
    n = 100
  )

# Trace plots

as_draws_df(
    Mat_before_NOinteraction
  ) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

as_draws_df(
    Mat_before_interaction
  ) |>
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

as_draws_df(
    Mat_after_NOinteraction
  ) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

as_draws_df(
    Mat_after_interaction
  ) |>
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_trace() +
  theme_bw()

# Trace rank

as_draws_df(
    Mat_before_NOinteraction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()

as_draws_df(
    Mat_before_interaction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()

as_draws_df(
    Mat_after_NOinteraction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()

as_draws_df(
    Mat_after_interaction
) |>   
  select(
    -c( prior_Intercept, prior_b, prior_sd_SampleDate, lprior )
  ) |> 
  bayesplot::mcmc_rank_overlay() +
  theme_bw()
```

#### Posterior prediction

```{r}
analyzedatabefore_plot <- analyzedatabyMat_before |> 
                            filter(
                              !( is.na( Total ) )
                            ) |> 
                            mutate(
                              case = factor(
                                1:length( Maturity )
                              ),
                              Label = paste0(
                                SampleDate,
                                "-",
                                substr(
                                  Maturity,
                                  start = 1,
                                  stop = 1
                                ),
                                "-",
                                substr(
                                  Sex,
                                  start = 1,
                                  stop = 1
                                )
                              )
                            )

predictionMat_before_NOinteraction <- predict( Mat_before_NOinteraction ) |> 
                                        as_tibble() |> 
                                        bind_cols(
                                          analyzedatabefore_plot
                                        )

analyzedatabefore_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionMat_before_NOinteraction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Maturity
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedatabefore_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - prespawn maturity with no interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )

predictionMat_before_interaction <- predict( Mat_before_interaction ) |> 
                                      as_tibble() |> 
                                      bind_cols(
                                        analyzedatabefore_plot
                                      )

analyzedatabefore_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionMat_before_interaction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Maturity
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedatabefore_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - prespawn maturity with interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )

analyzedataafter_plot <- analyzedatabyMat_after |> 
                            filter(
                              !( is.na( Total ) )
                            ) |> 
                            mutate(
                              case = factor(
                                1:length( Maturity )
                              ),
                              Label = paste0(
                                SampleDate,
                                "-",
                                substr(
                                  Maturity,
                                  start = 1,
                                  stop = 1
                                ),
                                "-",
                                substr(
                                  Sex,
                                  start = 1,
                                  stop = 1
                                )
                              )
                            )

predictionMat_after_NOinteraction <- predict( Mat_after_NOinteraction ) |> 
                                        as_tibble() |> 
                                        bind_cols(
                                          analyzedataafter_plot
                                        )

analyzedataafter_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionMat_after_NOinteraction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Maturity
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedataafter_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - spawning maturity with no interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )

predictionMat_after_interaction <- predict( Mat_after_interaction ) |> 
                                      as_tibble() |> 
                                      bind_cols(
                                        analyzedataafter_plot
                                      )

analyzedataafter_plot |> 
  ggplot(
    aes(
      x = Label,
      y = Top / Total
    )
  ) +
    geom_pointrange(
      data = predictionMat_after_interaction,
      aes(
        y = Estimate / Total,
        ymin = Q2.5 / Total,
        ymax = Q97.5 / Total,
        linetype = Maturity
      ),
      shape = 1
    ) +
    geom_point(
      aes(
        color = Sex
      ),
      size = 2
    ) +
    geom_text(
      data = analyzedataafter_plot,
      aes(
        x = Label,
        y = 1.01,
        label = Total,
      )
    ) +
    theme_bw() +
    labs(
      title = "Posterior validation check - spawning maturity with interaction",
      color = "",
      linetype = "",
      x = NULL
    ) +
    coord_cartesian(
      ylim = c( 0, 1 )
    ) +
    theme(
      axis.text.x = element_text(
        angle = 270,
        vjust = 0.5,
        hjust = 0
      )
    )
```

#### LOGO-CV evaluation

```{r}
# Pre spawn models
Mat_before_NOinteraction_kfold <- kfold(
                                    Mat_before_NOinteraction,
                                    group = "SampleDate"
                                  )

Mat_before_interaction_kfold <- kfold(
                                  Mat_before_interaction,
                                  group = "SampleDate"
                                )

# The SE of the elpd differences (se_diff) was computed without taking into account the grouping structure. A more accurate SE estimate could be obtained by first computing the group specific elpds - https://avehtari.github.io/modelselection/rats_kcv.html

cvgfix <- function( cv, cvidx ) {
  
              groupwise = numeric();
              K <- length( unique( cvidx ) )
              for ( i in 1:K ) { 
                groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
              }
              
              cv$pointwise <- cbind( elpd_kfolds = groupwise )
              cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
              cv$estimates[ 2 ] <- cv$se_elpd_kfold
              cv
          }

Mat_before_cvfolds <- loo::kfold_split_grouped(
                        K = analyzedatabyMat_before |> 
                          ungroup() |> 
                          distinct( SampleDate ) |> 
                          nrow(),
                        x = analyzedatabyMat_before |> 
                          pull( SampleDate )
                      )

Mat_before_NOinteraction_kfold_sefix <- cvgfix( Mat_before_NOinteraction_kfold, Mat_before_cvfolds )
Mat_before_interaction_kfold_sefix <- cvgfix( Mat_before_interaction_kfold, Mat_before_cvfolds )

# View LOGO difference
loo::loo_compare(
  Mat_before_NOinteraction_kfold_sefix,
  Mat_before_interaction_kfold_sefix
)

Mat_before_kfold_single_sefix_elpd <- cbind(
                              "NOint" = Mat_before_NOinteraction_kfold_sefix$pointwise[, "elpd_kfolds"],
                              "Int" = Mat_before_interaction_kfold_sefix$pointwise[, "elpd_kfolds"]
                            )

Mat_before_kfold_single_sefix_elpd_wt <- loo::stacking_weights( Mat_before_kfold_single_sefix_elpd )

# View stacking weights
Mat_before_kfold_single_sefix_elpd_wt

# Need to tease out draws in proportion to each weight
Mat_before_NOinteraction_paramwt <- Mat_before_NOinteraction |> 
                                      as_draws_df() |> 
                                      tibble() |> 
                                      # Select weighted number of draws without replacement
                                      dplyr::slice_sample(
                                        n =  Mat_before_kfold_single_sefix_elpd_wt[1] |> 
                                          tibble() |> 
                                          rename(
                                            Weight = everything()
                                          ) |> 
                                          mutate(
                                            Draws = round(
                                              Weight * nrow( as_draws_df( Mat_before_NOinteraction ) )
                                            )
                                          ) |> 
                                          pull(
                                            Draws
                                          ),
                                        replace = FALSE
                                      )

Mat_before_interaction_paramwt <- Mat_before_interaction |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::slice_sample(
                                      # First index is for no interaction
                                      n =  Mat_before_kfold_single_sefix_elpd_wt[2] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( Mat_before_interaction ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

Mat_before_ParamEsts_wt <- bind_rows(
                            Mat_before_NOinteraction_paramwt  |> 
                              mutate(
                                p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
                                p_top_female_green = inv_logit_scaled( b_Intercept ),
                                p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe )
                              ) |> 
                              as_tibble()  |> 
                              select( p_top_male_green:p_top_female_ripe, .chain, .iteration, .draw ),
                            Mat_before_interaction_paramwt |> 
                              mutate(
                                p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
                                p_top_female_green = inv_logit_scaled( b_Intercept ),
                                p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe )
                              ) |> 
                              as_tibble()  |> 
                              select( p_top_male_green:p_top_female_ripe, .chain, .iteration, .draw )
                          )

# Spawning models
Mat_after_NOinteraction_kfold <- kfold(
                                    Mat_after_NOinteraction,
                                    group = "SampleDate"
                                  )

Mat_after_interaction_kfold <- kfold(
                                  Mat_after_interaction,
                                  group = "SampleDate"
                                )

Mat_after_cvfolds <- loo::kfold_split_grouped(
                        K = analyzedatabyMat_after |> 
                          ungroup() |> 
                          distinct( SampleDate ) |> 
                          nrow(),
                        x = analyzedatabyMat_after |> 
                          pull( SampleDate )
                      )

Mat_after_NOinteraction_kfold_sefix <- cvgfix( Mat_after_NOinteraction_kfold, Mat_after_cvfolds )
Mat_after_interaction_kfold_sefix <- cvgfix( Mat_after_interaction_kfold, Mat_after_cvfolds )

# View LOGO difference
loo::loo_compare(
  Mat_after_NOinteraction_kfold_sefix,
  Mat_after_interaction_kfold_sefix
)

Mat_after_kfold_single_sefix_elpd <- cbind(
                              "NOint" = Mat_after_NOinteraction_kfold_sefix$pointwise[, "elpd_kfolds"],
                              "Int" = Mat_after_interaction_kfold_sefix$pointwise[, "elpd_kfolds"]
                            )

Mat_after_kfold_single_sefix_elpd_wt <- loo::stacking_weights( Mat_after_kfold_single_sefix_elpd )

# View stacking weights
Mat_after_kfold_single_sefix_elpd_wt

# Need to tease out draws in proportion to each weight
Mat_after_NOinteraction_paramwt <- Mat_after_NOinteraction |> 
                                      as_draws_df() |> 
                                      tibble() |> 
                                      # Select weighted number of draws without replacement
                                      dplyr::slice_sample(
                                        n =  Mat_after_kfold_single_sefix_elpd_wt[1] |> 
                                          tibble() |> 
                                          rename(
                                            Weight = everything()
                                          ) |> 
                                          mutate(
                                            Draws = round(
                                              Weight * nrow( as_draws_df( Mat_after_NOinteraction ) )
                                            )
                                          ) |> 
                                          pull(
                                            Draws
                                          ),
                                        replace = FALSE
                                      )

Mat_after_interaction_paramwt <- Mat_after_interaction |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::slice_sample(
                                      # First index is for no interaction
                                      n =  Mat_after_kfold_single_sefix_elpd_wt[2] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( Mat_after_interaction ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )

Mat_after_ParamEsts_wt <- bind_rows(
                            Mat_after_NOinteraction_paramwt  |> 
                              mutate(
                                p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
                                p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent ),
                                p_top_female_green = inv_logit_scaled( b_Intercept ),
                                p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent )
                              ) |> 
                              as_tibble()  |> 
                              select( p_top_male_green:p_top_female_spent, .chain, .iteration, .draw ),
                            Mat_after_interaction_paramwt |> 
                              mutate(
                                p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
                                p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent + `b_MaturitySpent:SexMale` ),
                                p_top_female_green = inv_logit_scaled( b_Intercept ),
                                p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent )
                              ) |> 
                              as_tibble()  |> 
                              select( p_top_male_green:p_top_female_spent, .chain, .iteration, .draw )
                          )
```

### Stacked probability parameter visualization

```{r}
# Visualization of linear predictor posterior
bind_rows(
  Mat_before_ParamEsts_wt |> 
  mutate(
    Period = "Pre-spawn"
  ),
  Mat_after_ParamEsts_wt |> 
    mutate(
      Period = "Spawning"
    )
) |> 
  pivot_longer(
    -c( .chain:.draw, Period ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  filter(
    !( is.na( Estimate ) )
  ) |> 
  mutate(
    Sex = if_else(
      Parameter %in% c( "p_top_male_green", "p_top_male_ripe", "p_top_male_spent" ),
      "Male",
      "Female"
    ),
    Maturity = case_when(
      grepl( "green", Parameter ) ~ "Green",
      grepl( "ripe", Parameter ) ~ "Ripe",
      grepl( "spent", Parameter ) ~ "Spent"
    ),
    across(
      c( Parameter, Period, Sex, Maturity ), 
      factor
    ),
    Support = if_else(
      Estimate > 0.50,
      "Yes",
      "No"
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      fill = Period,
      color = Period
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::mode_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::mode_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0.50
      ),
      linetype = "dashed"
    ) +
    geom_vline(
      aes(
        xintercept = 0.67
      ),
      linetype = "dotted"
    ) +
    geom_vline(
      aes(
        xintercept = 0.33
      ),
      linetype = "dotted"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      rows = vars( Maturity ),
      cols = vars( Sex ),
      scales = "free_y"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.945 ),
      axis.text = element_text( size = 13 ),
      legend.text = element_text( size = 14 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 16 ),
      title = element_text( size = 16 )
    ) +
    scale_color_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_fill_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_y_continuous(
      "",
      #breaks = NULL,
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch )",
      limits = c( 0 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()
```

### Hypothesis support

```{r}
ROPE_summary_mat <- bind_rows(
                      Mat_before_ParamEsts_wt |> 
                        select(
                          p_top_male_green:p_top_female_ripe
                        ) |> 
                        bayestestR::rope(
                          range = c(0, 0.5),
                          ci = 1
                        ) |> 
                        as_tibble() |> 
                        mutate(
                          Period = "Pre-spawn",
                          Hypothesis = "p < 0.5"
                        ),
                      Mat_before_ParamEsts_wt |> 
                        select(
                          p_top_male_green:p_top_female_ripe
                        ) |> 
                        bayestestR::rope(
                          range = c(0.5, 1),
                          ci = 1
                        ) |> 
                        as_tibble() |> 
                        mutate(
                          Period = "Pre-spawn",
                          Hypothesis = "p > 0.5"
                        ),
                      Mat_after_ParamEsts_wt |> 
                        select(
                          p_top_male_green:p_top_female_spent
                        ) |> 
                        bayestestR::rope(
                          range = c(0, 0.5),
                          ci = 1
                        ) |> 
                        as_tibble() |> 
                        mutate(
                          Period = "Spawning",
                          Hypothesis = "p < 0.5"
                        ),
                      Mat_after_ParamEsts_wt |> 
                        select(
                          p_top_male_green:p_top_female_spent
                        ) |> 
                        bayestestR::rope(
                          range = c(0.5, 1),
                          ci = 1
                        ) |> 
                        as_tibble() |> 
                        mutate(
                          Period = "Spawning",
                          Hypothesis = "p > 0.5"
                        )
                    ) |> 
                    select( Parameter, ROPE_Percentage:Hypothesis ) |> 
                    pivot_wider(
                      names_from = Hypothesis,
                      values_from = ROPE_Percentage
                    ) |> 
                    mutate(
                      Sex = if_else(
                        grepl( "female", tolower( Parameter ) ),
                        "Female",
                        "Male"
                      ),
                      Maturity = case_when(
                        grepl( "green", Parameter ) ~ "Green",
                        grepl( "ripe", Parameter ) ~ "Ripe",
                        grepl( "spent", Parameter ) ~ "Spent"
                      )
                    ) |> 
                    arrange(
                      Sex,
                      Maturity,
                      Period
                    )

ROPE_summary_mat |> 
  gt::gt()

ROPE_summary_mat |> 
  pivot_longer(
    `p > 0.5`:`p < 0.5`,
    names_to = "PD",
    values_to = "Support"
  ) |> 
  mutate(
    PD = if_else(
      PD == "p > 0.5",
      "Top",
      "Bottom"
    )
  ) |> 
  ggplot(
    aes(
        x = Period,
        y = Support,
        fill = PD,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      rows = vars( Maturity ),
      cols = vars( Sex ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.1 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      "Directional\nprobability",
      labels = c(
        "Top" = bquote( italic(dp)[italic('top net')] ),
        "Bottom" = bquote( italic(dp)[italic('bottom net')] )
      ),
      discrete = TRUE,
      option = "F"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

# Impute missing data

## MICE run

```{r}
totalcount_by_sex <- bind_rows(
                      # All fish with info
                      fish_cisco_info |> 
                        filter(
                          SetYear >= 2016,
                          !( is.na( GearFieldCode ) )
                        ) |> 
                        mutate(
                          ProjectDescription = if_else(
                            ProjectDescription == "summer index",
                            "Summer\nindex",
                            "Spawning Lake\nHerring Assessment"
                          ),
                          PlotDate = lubridate::date( DateSet ),
                          SampleDate = factor( PlotDate ),
                          GearFieldCode = factor(
                            GearFieldCode,
                            levels = c( "Top Net", "Bottom Net" )
                          ),
                          Sex = if_else(
                            Sex %in% c( "Male", "Female" ),
                            Sex,
                            "Unknown"
                          )
                        ) |> 
                        filter(
                          ProjectDescription == "Spawning Lake\nHerring Assessment"
                        ) |> 
                        mutate(
                          SampleDate = if_else(
                            SampleDate == "2022-12-07" & Grid == 1208,
                            "2022-12-06",
                            SampleDate
                          )
                        ) |> 
                        group_by(
                          PlotDate,
                          SetYear,
                          GearFieldCode,
                          Mesh,
                          Grid,
                          Sex,
                          Maturity
                        ) |> 
                        summarize(
                          TotalCatch = n()
                        ) |> 
                        mutate(
                          Observed = TRUE
                        ),
                        # All counted fish
                        fullfish_cisco_noinfo |> 
                          mutate(
                            PlotDate = lubridate::date( DateSet )
                          ) |> 
                          rename(
                            Mesh = Mesh.x
                          ) |> 
                          group_by(
                            PlotDate,
                            SetYear,
                            GearFieldCode,
                            Grid,
                            Mesh
                          ) |> 
                          summarize(
                            TotalCatch = sum( Total_caught )
                          ) |> 
                          mutate(
                            Sex = "Unknown",
                            Maturity = "Unknown",
                            Observed = FALSE
                          )
                      ) |> 
                      mutate(
                        Group = paste(
                          Sex,
                          Maturity,
                          sep = "-"
                        ),
                        Mesh = if_else(
                          Mesh == 22,
                          2,
                          Mesh
                        ),
                        Observed = if_else(
                          Sex == "Unknown" | Maturity == "Not checked",
                          FALSE,
                          Observed
                        )
                      ) |> 
                      group_by(
                        PlotDate,
                        SetYear,
                        Sex,
                        Maturity,
                        Group,
                        GearFieldCode,
                        Mesh,
                        Observed
                      ) |> 
                      summarize(
                        TotalCatch = sum( TotalCatch )
                      )

# Missingness Completely at Random
# Impute with mice and random forest
library(mice)

# Data with the not checked fish left as na
totalcount_mice <- totalcount_by_sex |> 
                    uncount(
                      TotalCatch
                    ) |> 
                    ungroup() |> 
                    mutate(
                      Group = if_else(
                        Sex == "Unknown" | Maturity == "Not checked",
                        NA,
                        Group
                      )
                    ) |> 
                    select(
                      -c(
                        Sex,
                        Maturity,
                        SetYear,
                        Observed
                      )
                    ) |> 
                    mutate(
                      across(
                        Group:GearFieldCode,
                        as.factor
                      )
                    ) |> 
                    arrange(
                      PlotDate,
                      GearFieldCode,
                      Mesh,
                      Group
                    ) |> 
                    mutate(
                      FishID = 1:n()
                    )

# Run 100 imputations
imputed_cisco_data <- totalcount_mice |> 
                        mutate(
                          DateNet = paste(
                            PlotDate,
                            GearFieldCode,
                            sep = "_"
                          )
                        ) |> 
                        select(
                          -PlotDate
                        ) |> 
                        group_nest(
                          DateNet
                        ) |> 
                        deframe() |> 
                        imap_dfr(
                          ~ {
                            mice(
                              .x,
                              m = 100,
                              maxit = 1,
                              method = "rf",
                              visitSequence = c(
                                "GearFieldCode", "Mesh", "Group"
                              ),
                              seed = 442
                            ) |> 
                            complete(
                              action = "long"
                            )
                          }
                        )

# saveRDS( imputed_cisco_data, "imputed_cisco_data.rds" )
# 
# imputed_cisco_data <- readRDS( "imputed_cisco_data.rds" )

# Combine MICE imputations with observed data and remove immature
imputed_cisco_data_wide_withmat <- imputed_cisco_data |> 
                                    mutate(
                                      # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
                                      # FishIDs 25:30
                                      Group = if_else(
                                                FishID %in% 25:30,
                                                "Male-Ripe",
                                                Group
                                              )
                                    ) |> 
                                    separate_wider_delim(
                                      Group,
                                      delim = "-",
                                      names = c( "Sex", "Maturity" )
                                    ) |> 
                                    left_join(
                                      totalcount_mice |> 
                                        mutate(
                                          Observed = if_else(
                                            is.na( Group ),
                                            FALSE,
                                            TRUE
                                          )
                                        ) |> 
                                        select(
                                          FishID,
                                          PlotDate,
                                          Observed
                                        ),
                                      by = "FishID"
                                    ) |> 
                                    group_by(
                                      .imp,
                                      Sex,
                                      Maturity,
                                      PlotDate,
                                      GearFieldCode
                                    ) |>
                                    summarize(
                                      Count = n()
                                    ) |>
                                    pivot_wider(
                                      names_from = GearFieldCode,
                                      values_from = Count
                                    ) |>
                                    mutate(
                                      across(
                                        `Bottom Net`:`Top Net`, ~replace_na( ., 0 )
                                      ),
                                      `Total Catch` = `Bottom Net` + `Top Net`,
                                      PlotDate = factor( PlotDate )
                                    ) |>
                                    ungroup() |>
                                    complete(
                                      .imp,
                                      Sex,
                                      Maturity,
                                      PlotDate
                                    ) |>
                                    left_join(
                                      fish_cisco_info |>
                                        filter(
                                          SetYear >= 2016,
                                          Sex %in% c( "Male", "Female" ),
                                          !( is.na( GearFieldCode ) ),
                                          Maturity == "Spent"
                                        ) |>
                                        mutate(
                                          ProjectDescription = if_else(
                                            ProjectDescription == "summer index",
                                            "Summer\nindex",
                                            "Spawning Lake\nHerring Assessment"
                                          ),
                                          PlotDate = factor( lubridate::date( DateSet ) ),
                                          GearFieldCode = factor(
                                            GearFieldCode,
                                            levels = c( "Top Net", "Bottom Net" )
                                          )
                                        ) |>
                                        distinct(
                                          PlotDate
                                        ) |>
                                        mutate(
                                          Period = "Spawning"
                                        ),
                                      by = "PlotDate"
                                    ) |>
                                    mutate(
                                      Period = if_else(
                                        is.na( Period ),
                                        "Pre-spawn",
                                        Period
                                      )
                                    ) |>
                                    rename(
                                      Bottom = `Bottom Net`,
                                      Top = `Top Net`,
                                      Total = `Total Catch`
                                    ) |>
                                    mutate(
                                      Sample = as.factor( as.numeric( PlotDate ) )
                                    ) |> 
                                    filter(
                                      !( Maturity == "Spent" & Period == "Pre-spawn" ),
                                      !( is.na( Sex ) ),
                                      Maturity != "Immature"
                                    ) |> 
                                    arrange(
                                      PlotDate,
                                      Sex,
                                      Maturity
                                    )

imputed_cisco_data_wide_withsex <- imputed_cisco_data_wide_withmat |> 
                                    group_by(
                                      .imp,
                                      Sex,
                                      PlotDate,
                                      Period
                                    ) |> 
                                    summarize(
                                      Bottom = sum( Bottom, na.rm = TRUE ),
                                      Top = sum( Top, na.rm = TRUE ),
                                      Total = sum( Total, na.rm = TRUE )
                                    )
```

### Summary

```{r}
# Sex counts
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    !Observed,
    Maturity != "Immature"
  ) |> 
  group_by(
    .imp,
    PlotDate,
    GearFieldCode,
    Sex
  ) |> 
  summarize(
    Count = n()
  ) |> 
  ungroup() |> 
  pivot_wider(
    names_from = PlotDate,
    values_from = Count,
    values_fill = 0
  ) |> 
  complete(
    .imp,
    nesting(
      GearFieldCode,
      Sex
    )
  )

# Maturity counts
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    !Observed,
    Maturity != "Immature"
  ) |> 
  group_by(
    .imp,
    PlotDate,
    GearFieldCode,
    Sex,
    Maturity
  ) |> 
  summarize(
    Count = n()
  ) |> 
  ungroup() |> 
  pivot_wider(
    names_from = PlotDate,
    values_from = Count,
    values_fill = 0
  ) |> 
  complete(
    .imp,
    nesting(
      GearFieldCode,
      Sex,
      Maturity
    )
  )
```

### Visualization

```{r}
# Sex ratio
## Top net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Top Net",
    Maturity != "Immature"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Sex,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars(PlotDate),
      scales = "free_y"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6",
        "Unknown" = "lightgrey"
      )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    labs(
      title = "Top Net",
      x = "Imputation",
      fill = "Sex"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )

## Bottom net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Bottom Net",
    Maturity != "Immature"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Sex,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars( PlotDate ),
      scales = "free_y"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6",
        "Unknown" = "lightgrey"
      )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    labs(
      title = "Bottom Net",
      x = "Imputation",
      fill = "Sex"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )

# Male Maturity
## Top Net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Top Net",
    Sex == "Male"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Maturity,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars( PlotDate ),
      scales = "free"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Green" = "#30123B",
        "Immature" = "#28BBEB",
        "Not checked" = "#7A0403",
        "Ripe" = "#FB8021",
        "Spent" = "#A2FC3C"
      )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    labs(
      title = "Top Net - males",
      x = "Imputation",
      fill = "Maturity"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )

## Bottom Net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Bottom Net",
    Sex == "Male"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Maturity,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars( PlotDate ),
      scales = "free"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Green" = "#30123B",
        "Immature" = "#28BBEB",
        "Not checked" = "#7A0403",
        "Ripe" = "#FB8021",
        "Spent" = "#A2FC3C"
      )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    labs(
      title = "Bottom Net - males",
      x = "Imputation",
      fill = "Maturity"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )

# Female Maturity
## Top Net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Top Net",
    Sex == "Female"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Maturity,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars( PlotDate ),
      scales = "free"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Green" = "#30123B",
        "Immature" = "#28BBEB",
        "Not checked" = "#7A0403",
        "Ripe" = "#FB8021",
        "Spent" = "#A2FC3C"
      )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    labs(
      title = "Top Net - females",
      x = "Imputation",
      fill = "Maturity"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )

## Bottom Net
imputed_cisco_data |> 
  mutate(
    # FISH IN TOP NET ON 11-14-2016 NOT ASSIGNED BECAUSE ONLY SINGLE FISH-MANUALLY OVERWRITE SINCE TREE CAN'T SPLIT ON SINGLE OBS
    # FishIDs 25:30
    Group = if_else(
              FishID %in% 25:30,
              "Male-Ripe",
              Group
            )
  ) |> 
  separate_wider_delim(
    Group,
    delim = "-",
    names = c( "Sex", "Maturity" )
  ) |> 
  left_join(
    totalcount_by_sex |> 
      uncount(
        TotalCatch
      ) |> 
      ungroup() |> 
      arrange(
        PlotDate,
        GearFieldCode,
        Mesh,
        Group
      ) |> 
      select(
        PlotDate,
        Observed,
        GearFieldCode
      ) |> 
      mutate(
        FishID = 1:n()
      ),
    by = c( "GearFieldCode", "FishID" )
  ) |> 
  filter(
    GearFieldCode == "Bottom Net",
    Sex == "Female"
  ) |> 
  ggplot(
    aes(
      x = factor( .imp ),
      fill = Maturity,
      alpha = Observed
    )
  ) +
    geom_bar() +
    facet_grid(
      rows = vars( PlotDate ),
      scales = "free"
    ) +
    theme_bw() +
    scale_fill_manual(
      values = c(
        "Green" = "#30123B",
        "Immature" = "#28BBEB",
        "Not checked" = "#7A0403",
        "Ripe" = "#FB8021",
        "Spent" = "#A2FC3C"
      )
    ) +
    scale_alpha_discrete(
      range = c( 0.5, 1 )
    ) +
    theme(
      legend.position = "top",
      axis.text.x = element_text(
          angle = 270,
          vjust = 0.5,
          hjust = 0,
          size = 13
        ),
      axis.text.y = element_text( size = 8 ),
      legend.text = element_text( size = 14 ),
      legend.title = element_text( size = 15 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 6 )
    ) +
    labs(
      title = "Bottom Net - females",
      x = "Imputation",
      fill = "Maturity"
    ) +
    scale_y_continuous(
      "Catch",
      expand = expansion(
        mult = c( 0.01, 0.01 )
      )
    )
```

# Objective 1

## Build models

```{r}
# Make the sex summaries a list
imputed_cisco_sex_list <- imputed_cisco_data_wide_withsex |>
                            mutate(
                              .imp = factor( .imp )
                            ) |>
                            group_by(
                              .imp
                            ) |> 
                            nest() |> 
                            deframe()

sex_impute_NOint_sep <- brm_multiple(
                          data = imputed_cisco_sex_list,
                          family = binomial,
                          Top | trials( Total ) ~ ( 1|PlotDate ) + Sex + Period,
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 152,
                          prior = c(
                            prior(
                              normal( 0, 2 ),
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          control = list(
                            adapt_delta = 0.95
                          ),
                          backend = "cmdstanr",
                          sample_prior = TRUE,
                          save_pars = save_pars( all = T ),
                          combine = FALSE
                        )
saveRDS(
  sex_impute_NOint_sep,
  "sex_impute_NOint_sep.rds"
)

# sex_impute_NOint_sep <- readRDS("sex_impute_NOint_sep.rds")

sex_impute_int_sep <- brm_multiple(
                          data = imputed_cisco_sex_list,
                          family = binomial,
                          Top | trials( Total ) ~ ( 1|PlotDate ) + Sex + Period + Sex*Period,
                          iter = 2000,
                          warmup = 1000,
                          cores = 4,
                          chains = 4,
                          seed = 442,
                          prior = c(
                            prior(
                              normal( 0, 2 ),
                              class = Intercept
                            ),
                            prior(
                              normal( 0, 2 ),
                              class = b
                            ),
                            prior(
                              exponential( 1 ),
                              class = sd
                            )
                          ),
                          control = list(
                            adapt_delta = 0.95
                          ),
                          backend = "cmdstanr",
                          sample_prior = TRUE,
                          save_pars = save_pars( all = T ),
                          combine = FALSE
                        )

saveRDS(
  sex_impute_int_sep,
  "sex_impute_int_sep.rds"
)

# sex_impute_int_sep <- readRDS("sex_impute_int_sep.rds")
```

## Diagnostics

```{r}
# Numerical
sex_impute_sep_summary <- bind_rows(
                            sex_impute_NOint_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning ),
                                      p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                      p_top_female_spawning = inv_logit_scaled( b_Intercept )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "No interaction",
                                      Iteration = .y
                                    )
                                )
                              ),
                            sex_impute_int_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning + `b_SexMale:PeriodSpawning` ),
                                      p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_female_prespawn = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                      p_top_female_spawning = inv_logit_scaled( b_Intercept )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "Interaction",
                                      Iteration = .y
                                    )
                                )
                              )
)

sex_impute_sep_summary |> 
  filter(
    ess_bulk < 400 | ess_tail < 400
  )

sex_impute_sep_summary |> 
  filter(
    round( rhat, digits = 2 ) > 1.01
  )

sex_impute_sep_summary |> 
  mutate(
    across(
      c( variable, Model, Iteration ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Diagnostics for Ojective 1 MICE models",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

# Graphical

# Trace plots
sex_impute_NOint_sep_trace <- sex_impute_NOint_sep |> 
                                imap(
                                  ~ (
                                    .x |> 
                                      as_draws_df() |>   
                                      select(
                                        -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                      ) |> 
                                      bayesplot::mcmc_trace() +
                                      theme_bw() +
                                      ggtitle( paste( "No Int Imp:", .y ) )
                                  )
                                )

sex_impute_int_sep_trace <- sex_impute_int_sep |> 
                              imap(
                                ~ (
                                  .x |> 
                                    as_draws_df() |>   
                                    select(
                                      -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                    ) |> 
                                    bayesplot::mcmc_trace() +
                                    theme_bw() +
                                    ggtitle( paste( "Int Imp:", .y ) )
                                )
                              )

# Trace rank
sex_impute_NOint_sep_trank <- sex_impute_NOint_sep |> 
                                imap(
                                  ~ (
                                    .x |> 
                                      as_draws_df() |>   
                                      select(
                                        -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                      ) |> 
                                      bayesplot::mcmc_rank_overlay() +
                                      theme_bw() +
                                      ggtitle( paste( "No Int Imp:", .y ) )
                                  )
                                )

sex_impute_int_sep_trank <- sex_impute_int_sep |> 
                              imap(
                                ~ (
                                  .x |> 
                                    as_draws_df() |>   
                                    select(
                                      -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                    ) |> 
                                    bayesplot::mcmc_rank_overlay() +
                                    theme_bw() +
                                    ggtitle( paste( "Int Imp:", .y ) )
                                )
                              )

# Posterior prediction

imputed_cisco_sex_list_plot <- imputed_cisco_sex_list |> 
                                map(
                                  ~ (
                                    .x |> 
                                      mutate(
                                        case = factor(
                                          1:length( Sex )
                                        ),
                                        Label = paste0(
                                          PlotDate,
                                          "-",
                                          substr(
                                            Sex,
                                            start = 1,
                                            stop = 1
                                          )
                                        )
                                      )
                                  )
                                )

prediction_sex_impute_NOint_sep <- map2(
                                      sex_impute_NOint_sep,
                                      imputed_cisco_sex_list_plot,
                                      ~ (
                                        predict( .x ) |> 
                                          as_tibble() |> 
                                          bind_cols( .y )
                                      )
                                    )

prediction_sex_impute_int_sep <- map2(
                                    sex_impute_int_sep,
                                    imputed_cisco_sex_list_plot,
                                    ~ (
                                      predict( .x ) |> 
                                        as_tibble() |> 
                                        bind_cols( .y )
                                    )
                                  )

plot_sex_impute_NOint_sep <- imap(
                                imputed_cisco_sex_list_plot,
                                ~ (
                                  .x |> 
                                    ggplot(
                                      aes(
                                        x = Label,
                                        y = Top / Total
                                      )
                                    ) +
                                      geom_pointrange(
                                        data = prediction_sex_impute_NOint_sep[[ as.numeric( .y ) ]],
                                        aes(
                                          y = Estimate / Total,
                                          ymin = Q2.5 / Total,
                                          ymax = Q97.5 / Total,
                                          linetype = Period
                                        ),
                                        shape = 1
                                      ) +
                                      geom_point(
                                        aes(
                                          color = Sex
                                        ),
                                        size = 2
                                      ) +
                                      geom_text(
                                        data = .x,
                                        aes(
                                          x = Label,
                                          y = 1.01,
                                          label = Total,
                                        )
                                      ) +
                                      theme_bw() +
                                      labs(
                                        title = paste(
                                          "Posterior validation check - sex with no interaction, Imp:",
                                          .y
                                        ),
                                        color = "",
                                        linetype = "",
                                        x = NULL
                                      ) +
                                      coord_cartesian(
                                        ylim = c( 0, 1 )
                                      ) +
                                      theme(
                                        axis.text.x = element_text(
                                          angle = 270,
                                          vjust = 0.5,
                                          hjust = 0
                                        )
                                      )
                                )
                              )

plot_sex_impute_int_sep <- imap(
                            imputed_cisco_sex_list_plot,
                            ~ (
                              .x |> 
                                ggplot(
                                  aes(
                                    x = Label,
                                    y = Top / Total
                                  )
                                ) +
                                  geom_pointrange(
                                    data = prediction_sex_impute_int_sep[[ as.numeric( .y ) ]],
                                    aes(
                                      y = Estimate / Total,
                                      ymin = Q2.5 / Total,
                                      ymax = Q97.5 / Total,
                                      linetype = Period
                                    ),
                                    shape = 1
                                  ) +
                                  geom_point(
                                    aes(
                                      color = Sex
                                    ),
                                    size = 2
                                  ) +
                                  geom_text(
                                    data = .x,
                                    aes(
                                      x = Label,
                                      y = 1.01,
                                      label = Total,
                                    )
                                  ) +
                                  theme_bw() +
                                  labs(
                                    title = paste(
                                      "Posterior validation check - sex with interaction, Imp:",
                                      .y
                                    ),
                                    color = "",
                                    linetype = "",
                                    x = NULL
                                  ) +
                                  coord_cartesian(
                                    ylim = c( 0, 1 )
                                  ) +
                                  theme(
                                    axis.text.x = element_text(
                                      angle = 270,
                                      vjust = 0.5,
                                      hjust = 0
                                    )
                                  )
                            )
                          )

# Save images

fs::dir_create( "Obj1Diagnostics" )

fs::dir_create( "Obj1Diagnostics/Trace" )

sex_NOint_traceplot_paths <- str_glue("Obj1Diagnostics/Trace/{1:100}_NOint_traceplot.png")

walk2(
  sex_NOint_traceplot_paths,
  sex_impute_NOint_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

sex_int_traceplot_paths <- str_glue("Obj1Diagnostics/Trace/{1:100}_int_traceplot.png")

walk2(
  sex_int_traceplot_paths,
  sex_impute_int_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

fs::dir_create( "Obj1Diagnostics/Trank" )

sex_NOint_trankplot_paths <- str_glue("Obj1Diagnostics/Trank/{1:100}_NOint_trankplot.png")

walk2(
  sex_NOint_trankplot_paths,
  sex_impute_NOint_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

sex_int_trankplot_paths <- str_glue("Obj1Diagnostics/Trank/{1:100}_int_trankplot.png")

walk2(
  sex_int_trankplot_paths,
  sex_impute_int_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

fs::dir_create( "Obj1Diagnostics/PPC" )

sex_NOint_ppc_paths <- str_glue("Obj1Diagnostics/PPC/{1:100}_NOint_ppcplot.png")

walk2(
  sex_NOint_ppc_paths,
  plot_sex_impute_NOint_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)

sex_int_ppc_paths <- str_glue("Obj1Diagnostics/PPC/{1:100}_int_ppcplot.png")

walk2(
  sex_int_ppc_paths,
  plot_sex_impute_int_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)
```

## LOGO CV

```{r}
sex_impute_int_sep_kfold <- sex_impute_int_sep |> 
                                  map(
                                    ~ kfold(
                                        .x,
                                        group = "PlotDate"
                                      )
                                  )

saveRDS(
  sex_impute_int_sep_kfold,
  "sex_impute_int_sep_kfold.rds"
)

# sex_impute_int_sep_kfold <- readRDS("sex_impute_int_sep_kfold.rds")

sex_impute_NOint_sep_kfold <- sex_impute_NOint_sep |> 
                                    map(
                                      ~ kfold(
                                          .x,
                                          group = "PlotDate"
                                        )
                                    )

saveRDS(
  sex_impute_NOint_sep_kfold,
  "sex_impute_NOint_sep_kfold.rds"
)

# sex_impute_NOint_sep_kfold <- readRDS("sex_impute_NOint_sep_kfold.rds")

# Function to group folds for correct Standard Error estimates
# https://avehtari.github.io/modelselection/rats_kcv.html#ref-Merkle+Furr+Rabe-Hesketh:2018
cvgfix <- function( cv, cvidx ) {
    groupwise = numeric();
    K <- length( unique( cvidx ) )
    for ( i in 1:K ) { 
      groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
    }
    
    cv$pointwise <- cbind( elpd_kfolds = groupwise )
    cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
    cv$estimates[ 2 ] <- cv$se_elpd_kfold
    cv
}

imputed_cisco_sex_list <- imputed_cisco_data_wide_withsex |>
                            mutate(
                              .imp = factor(.imp)
                            ) |>
                            group_by(
                              .imp
                            ) |>
                            nest() |> 
                            deframe()

# Function to get proper fold layout to use in function
cvfolds_sex <- loo::kfold_split_grouped(
                  K = imputed_cisco_sex_list[[1]] |> 
                    distinct(PlotDate) |> 
                    nrow(),
                  x = imputed_cisco_sex_list[[1]] |> 
                    mutate(
                      # Remove any potential effect the levels might have on what happens next
                      PlotDate = factor(PlotDate)
                    ) |> 
                    pull(PlotDate)
                )

sex_impute_int_sep_kfold_sefix <- sex_impute_int_sep_kfold |> 
                                    map(
                                      ~ cvgfix(
                                        .x,
                                        cvfolds_sex
                                      )
                                    )

sex_impute_NOint_sep_kfold_sefix <- sex_impute_NOint_sep_kfold |> 
                                      map(
                                        ~ cvgfix(
                                          .x,
                                          cvfolds_sex
                                        )
                                      )

sex_impute_sep_kfold_sefix_comparelist <- map2(
                                            sex_impute_NOint_sep_kfold_sefix,
                                            sex_impute_int_sep_kfold_sefix,
                                            ~ loo::loo_compare(
                                              list("No_Int" = .x, "Int" = .y)
                                            )
                                          )

sex_impute_sep_kfold_sefix_elpd <- map2(
                                    sex_impute_NOint_sep_kfold_sefix,
                                    sex_impute_int_sep_kfold_sefix,
                                    ~ cbind(
                                        "No_Int" =.x$pointwise[, "elpd_kfolds"],
                                        "Int" = .y$pointwise[, "elpd_kfolds"]
                                      )
                                  )


sex_impute_sep_kfold_sefix_wts <- sex_impute_sep_kfold_sefix_elpd |> 
                                    map(
                                      loo::stacking_weights
                                    )

saveRDS(
  sex_impute_sep_kfold_sefix_wts,
  "sex_impute_sep_kfold_sefix_wts.rds"
)

# sex_impute_sep_kfold_sefix_wts <- readRDS( "sex_impute_sep_kfold_sefix_wts.rds" )

sex_impute_LOGOCV_ests <- sex_impute_sep_kfold_sefix_comparelist |> 
                            imap_dfr(
                              ~ (
                                bind_rows(
                                  .x[ "No_Int", ] |> 
                                    as_tibble_row() |> 
                                    mutate(
                                      Model = "No_Int",
                                      Iteration = .y
                                    ),
                                  .x[ "Int", ] |> 
                                    as_tibble_row() |> 
                                    mutate(
                                      Model = "Int",
                                      Iteration = .y
                                    )
                                )
                              )
                            ) |> 
                            left_join(
                              sex_impute_sep_kfold_sefix_wts |> 
                                imap_dfr(
                                  ~ (
                                    bind_rows(
                                      .x[ "model1" ] |> 
                                        as_tibble() |> 
                                        rename(
                                          weight = 1
                                        ) |> 
                                        mutate(
                                          Model = "No_Int",
                                          Iteration = .y
                                        ),
                                      .x[ "model2" ] |> 
                                        as_tibble() |> 
                                        rename(
                                          weight = 1
                                        ) |> 
                                        mutate(
                                          Model = "Int",
                                          Iteration = .y
                                        )
                                    )
                                  )
                                ),
                              by = c( "Model", "Iteration" )
                            ) |> 
                            select(
                              Model, Iteration, weight, elpd_kfold, elpd_diff, se_elpd_kfold, se_diff, everything()
                            )

sex_impute_LOGOCV_ests |> 
  mutate(
    across(
      c( Model, Iteration ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 1 LOGO CV estimates",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

sex_impute_LOGOCV_summary <- sex_impute_LOGOCV_ests |> 
                              group_by(
                                Model
                              ) |> 
                              summarize(
                                across( 
                                  weight:se_p_kfold,
                                  list(
                                    mean = mean,
                                    sd = sd,
                                    median = median,
                                    mad = mad,
                                    max = max,
                                    min = min
                                  ),
                                  .names = "{.col}.{.fn}"
                                )
                              ) |> 
                              pivot_longer(
                                -Model,
                                names_to = "Param",
                                values_to = "Est"
                              ) |> 
                              separate_wider_delim(
                                cols = "Param",
                                delim = ".",
                                names = c( "Parameter", "Summary" )
                              ) |> 
                              pivot_wider(
                                names_from = "Summary",
                                values_from = "Est"
                              ) |> 
                              arrange(
                                Parameter,
                                Model
                              )

sex_impute_LOGOCV_summary |> 
  mutate(
    across(
      c( Model, Parameter ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 1 LOGO CV summary",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )
```

### Weighting models

```{r}
# Need to tease out draws relative to each weight
sex_impute_NOint_paramwt <- map2(
                              sex_impute_NOint_sep,
                              sex_impute_sep_kfold_sefix_wts,
                              ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    tibble() |> 
                                    # Select weighted number of draws without replacement
                                    dplyr::slice_sample(
                                      # First index is for no interaction
                                      n =  .y[ 1 ] |> 
                                        tibble() |> 
                                        rename(
                                          Weight = everything()
                                        ) |> 
                                        mutate(
                                          Draws = round(
                                            Weight * nrow( as_draws_df( .x ) )
                                          )
                                        ) |> 
                                        pull(
                                          Draws
                                        ),
                                      replace = FALSE
                                    )
                                )
                            )

sex_impute_int_paramwt <- map2(
                            sex_impute_int_sep,
                            sex_impute_sep_kfold_sefix_wts,
                            ~ (
                                .x |> 
                                  as_draws_df() |> 
                                  tibble() |> 
                                  # Select weighted number of draws without replacement
                                  dplyr::slice_sample(
                                    # Second index is for interaction
                                    n =  .y[ 2 ] |> 
                                      tibble() |> 
                                      rename(
                                        Weight = everything()
                                      ) |> 
                                      mutate(
                                        Draws = round(
                                          Weight * nrow( as_draws_df( .x ) )
                                        )
                                      ) |> 
                                      pull(
                                        Draws
                                      ),
                                    replace = FALSE
                                  )
                              )
                          )

# Probability ests
Sex_ImpParamEsts_wt <- bind_rows(
                        sex_impute_NOint_paramwt %>%
                          setNames(
                            nm = 1:length( . )
                          ) %>%
                          map(
                            ~ (
                              .x |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw )
                            )
                          ) |> 
                          enframe() |> 
                          rename(
                            Imputation = name
                          ) |> 
                          unnest(
                            value
                          ),
                        sex_impute_int_paramwt %>%
                          setNames(
                            nm = 1:length( . )
                          ) %>%
                          map(
                            ~ (
                              .x |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning + `b_SexMale:PeriodSpawning` )
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_prespawn:p_top_male_spawning, .chain, .iteration, .draw )
                            )
                          ) |> 
                          enframe() |> 
                          rename(
                            Imputation = name
                          ) |> 
                          unnest(
                            value
                          )
                      )

# Contrasts
Sex_ImpParamCont_wt <- bind_rows(
                        sex_impute_NOint_paramwt %>%
                          setNames(
                            nm = 1:length( . )
                          ) %>%
                          map(
                            ~ (
                              .x |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning ),
                                  p_top_female_ptos_contrast = p_top_female_spawning - p_top_female_prespawn,
                                  p_top_male_ptos_contrast = p_top_male_spawning - p_top_male_prespawn,
                                  p_top_femaletomale_pre_contrast = p_top_female_prespawn - p_top_male_prespawn,
                                  p_top_femaletomale_spawn_contrast = p_top_female_spawning - p_top_male_spawning
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_ptos_contrast:p_top_femaletomale_spawn_contrast, .chain, .iteration, .draw )
                            )
                          ) |> 
                          enframe() |> 
                          rename(
                            Imputation = name
                          ) |> 
                          unnest(
                            value
                          ),
                        sex_impute_int_paramwt %>%
                          setNames(
                            nm = 1:length( . )
                          ) %>%
                          map(
                            ~ (
                              .x |> 
                                mutate(
                                  p_top_female_prespawn = inv_logit_scaled( b_Intercept ),
                                  p_top_male_prespawn = inv_logit_scaled( b_Intercept + b_SexMale ),
                                  p_top_female_spawning = inv_logit_scaled( b_Intercept + b_PeriodSpawning ),
                                  p_top_male_spawning = inv_logit_scaled( b_Intercept + b_SexMale + b_PeriodSpawning + `b_SexMale:PeriodSpawning` ),
                                  p_top_female_ptos_contrast = p_top_female_spawning - p_top_female_prespawn,
                                  p_top_male_ptos_contrast = p_top_male_spawning - p_top_male_prespawn,
                                  p_top_femaletomale_pre_contrast = p_top_female_prespawn - p_top_male_prespawn,
                                  p_top_femaletomale_spawn_contrast = p_top_female_spawning - p_top_male_spawning
                                ) |> 
                                as_tibble()  |> 
                                select( p_top_female_ptos_contrast:p_top_femaletomale_spawn_contrast, .chain, .iteration, .draw )
                            )
                          ) |> 
                          enframe() |> 
                          rename(
                            Imputation = name
                          ) |> 
                          unnest(
                            value
                          )
                      )
```

## Stacked probability of top net catch

```{r}
Sex_ImpParamEsts_wt |> 
  select(
    -c( Imputation, .chain:.draw )
  ) |> 
  posterior::summarize_draws()

# Probability facet by S
Sex_ImpParamEsts_wt |> 
  pivot_longer(
    c( p_top_female_prespawn:p_top_male_spawning ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  mutate(
    Period = if_else(
      Parameter %in% c( "p_top_female_prespawn", "p_top_male_prespawn" ),
      "Pre-spawn",
      "Spawning"
    ),
    Sex = if_else(
      Parameter %in% c( "p_top_male_prespawn", "p_top_male_spawning" ),
      "Male",
      "Female"
    ),
    across(
      c( Parameter, Period, Sex ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      fill = Period,
      color = Period
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0.50
      ),
      linetype = "dashed"
    ) +
    geom_vline(
      aes(
        xintercept = 0.67
      ),
      linetype = "dotted"
    ) +
    geom_vline(
      aes(
        xintercept = 0.33
      ),
      linetype = "dotted"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      cols = vars( Sex ),
      scales = "free_y"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.945 )
    ) +
    scale_color_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_fill_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch )",
      limits = c( 0 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()

# Probability facet by P
Figure5_Obj1 <- Sex_ImpParamEsts_wt |> 
  pivot_longer(
    c( p_top_female_prespawn:p_top_male_spawning ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  mutate(
    Period = if_else(
      Parameter %in% c( "p_top_female_prespawn", "p_top_male_prespawn" ),
      "Pre-spawn",
      "Spawning"
    ),
    Sex = if_else(
      Parameter %in% c( "p_top_male_prespawn", "p_top_male_spawning" ),
      "Male",
      "Female"
    ),
    across(
      c( Parameter, Period, Sex ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      fill = Sex,
      color = Sex
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0.50
      ),
      linetype = "dashed"
    ) +
    geom_vline(
      aes(
        xintercept = 0.67
      ),
      linetype = "dotted"
    ) +
    geom_vline(
      aes(
        xintercept = 0.33
      ),
      linetype = "dotted"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      cols = vars( Period ),
      scales = "free_y"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.92, 0.92 )
    ) +
    scale_color_manual(
      "",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch )",
      limits = c( 0 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()

ggsave( "Figure5_Obj1.tiff", plot = Figure5_Obj1, dpi = 350, width = 7, height = 6.5, units = "in" )
```

## Hypothesis support

```{r}
ROPE_summary_sex_mice <- bind_rows(
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_prespawn:p_top_male_prespawn
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.33 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Bottom"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_prespawn:p_top_male_prespawn
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.33, 0.67 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Middle"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_prespawn:p_top_male_prespawn
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.67, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "Top"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_prespawn:p_top_male_prespawn
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.5, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "p > 0.5"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_spawning:p_top_male_spawning
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.33 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Bottom"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_spawning:p_top_male_spawning
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.33, 0.67 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Middle"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_spawning:p_top_male_spawning
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.67, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "Top"
                            ),
                          Sex_ImpParamEsts_wt |> 
                            select(
                              p_top_female_spawning:p_top_male_spawning
                            ) |>  
                            bayestestR::rope(
                              range = c( 0.5, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "p > 0.5"
                            )
                        ) |> 
                        select(Parameter, ROPE_Percentage:Hypothesis) |> 
                        pivot_wider(
                          names_from = Hypothesis,
                          values_from = ROPE_Percentage
                        ) |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", tolower( Parameter ) ),
                            "Female",
                            "Male"
                          )
                        ) |> 
                        select(
                          Sex,
                          Period,
                          Bottom:`p > 0.5`
                        ) |> 
                        arrange(
                          Sex,
                          Period
                        )

ROPE_summary_sex_mice |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 1 Hypothesis support",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

# Facet by S
ROPE_summary_sex_mice |> 
  pivot_longer(
    Bottom:Top,
    names_to = "Hypothesis",
    values_to = "Support"
  ) |> 
  mutate(
    Hypothesis = case_when(
      Hypothesis == "Middle" ~ "H0",
      Hypothesis == "Bottom" ~ "H1",
      Hypothesis == "Top" ~ "H2"
    )
  ) |> 
  ggplot(
    aes(
        x = Period,
        y = Support,
        fill = Hypothesis,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      cols = vars( Sex ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      labels = c(
        "H0" = bquote(italic(H)[italic('0')]~'- no bias'),
        "H1" = bquote(italic(H)[italic('1')]~'- bottom net bias'),
        "H2" = bquote(italic(H)[italic('2')]~'- top net bias')
      ),
      discrete = TRUE,
      option = "G"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )

# Facet by P
ROPE_summary_sex_mice |> 
  pivot_longer(
    Bottom:Top,
    names_to = "Hypothesis",
    values_to = "Support"
  ) |> 
  mutate(
    Hypothesis = case_when(
      Hypothesis == "Middle" ~ "H0",
      Hypothesis == "Bottom" ~ "H1",
      Hypothesis == "Top" ~ "H2"
    )
  ) |> 
  ggplot(
    aes(
        x = Sex,
        y = Support,
        fill = Hypothesis,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      cols = vars( Period ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      labels = c(
        "H0" = bquote(italic(H)[italic('0')]~'- no bias'),
        "H1" = bquote(italic(H)[italic('1')]~'- bottom net bias'),
        "H2" = bquote(italic(H)[italic('2')]~'- top net bias')
      ),
      discrete = TRUE,
      option = "G"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

## Contrast

```{r}
# Contrasted probability
Sex_ImpParamCont_wt |> 
  select(
    -c( Imputation, .chain:.draw )
  ) |> 
  posterior::summarize_draws()

Sex_ImpParamCont_pd <- Sex_ImpParamCont_wt |> 
                        select(
                          p_top_female_ptos_contrast:p_top_male_ptos_contrast
                        ) |> 
                        bayestestR::pd() |> 
                        as_tibble() |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", tolower( Parameter ) ),
                            "Female",
                            "Male"
                          ),
                          y = 0.65,
                          x = if_else(
                            Sex == "Male",
                            -0.9,
                            -0.8
                          ),
                          label = paste( Sex, "contrast pd:", round( pd, digits = 4 ) )
                        )

Sex_ImpParamCont_wt |> 
  pivot_longer(
    c( p_top_female_ptos_contrast:p_top_male_ptos_contrast ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  mutate(
    Sex = if_else(
      Parameter == "p_top_male_ptos_contrast",
      "Male",
      "Female"
    ),
    across(
      c( Parameter, Sex ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      color = Sex,
      fill = Sex
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0
      ),
      linetype = "dashed"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    geom_text(
      data = Sex_ImpParamCont_pd,
      aes(
        x = x,
        y = y,
        color = Sex,
        label = label
      ),
      size = 8,
      show.legend = FALSE
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.93 )
    ) +
    scale_color_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch ) Contrast: Prespawn to spawning",
      limits = c( -1 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()

Sex_ImpParamCont_wt |> 
  pivot_longer(
    c( p_top_femaletomale_pre_contrast:p_top_femaletomale_spawn_contrast ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  mutate(
    Period = if_else(
      Parameter == "p_top_femaletomale_pre_contrast",
      "Pre-spawn",
      "Spawning"
    ),
    across(
      c( Parameter, Period ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      color = after_stat( x > 0 ),
      fill = after_stat( x > 0 )
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0
      ),
      linetype = "dashed"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      cols = vars( Period )
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.93 )
    ) +
    scale_color_manual(
      "Female",
      values = c(
        "TRUE" = "#D7263D",
        "FALSE" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "Female",
      values = c(
        "TRUE" = "#D7263D",
        "FALSE" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch ) Contrast: Female to male",
      limits = c( -1 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    )
```

# Objective 2

## Build predictive model

```{r}
# Generate 100 predictive posterior distributions for each model
sex_impute_NOint_sep_prediction <- sex_impute_NOint_sep |> 
                                    map(
                                      ~ {
                                        .x |> 
                                          tidybayes::predicted_draws(
                                            newdata = expand_grid(
                                              Sex = c( "Female", "Male" ),
                                              Period = c( "Pre-spawn", "Spawning" ),
                                              Total = 1000,
                                              PlotDate = NA,
                                              Prediction = 1:100
                                            ),
                                            re_formula = NULL
                                          )
                                      }
                                    )

sex_impute_int_sep_prediction <- sex_impute_int_sep |> 
                                    map(
                                      ~ {
                                        .x |> 
                                          tidybayes::predicted_draws(
                                            newdata = expand_grid(
                                              Sex = c( "Female", "Male" ),
                                              Period = c( "Pre-spawn", "Spawning" ),
                                              Total = 1000,
                                              PlotDate = NA,
                                              Prediction = 1:100
                                            ),
                                            re_formula = NULL
                                          )
                                      }
                                    )

# Weight predictive posteriors based on stacking weights
sex_impute_NOint_sep_prediction_wts <- map2(
                                        sex_impute_NOint_sep_prediction,
                                        sex_impute_sep_kfold_sefix_wts,
                                        ~ (
                                            .x |> 
                                              tibble() |> 
                                              ungroup() |> 
                                              mutate(
                                                Div = paste0( Sex, "_", Period )
                                              ) |> 
                                              select(
                                                -c( .row, Sex, Period )
                                              ) |> 
                                              # Make wide
                                              pivot_wider(
                                                names_from = "Div",
                                                values_from = ".prediction"
                                              ) |> 
                                              group_by(
                                                Prediction
                                              ) |> 
                                              # Select weighted number of draws without replacement
                                              dplyr::sample_n(
                                                # First index is for no interaction
                                                size =  .y[ 1 ] |> 
                                                  tibble() |> 
                                                  rename(
                                                    Weight = everything()
                                                  ) |> 
                                                  mutate(
                                                    Draws = round(
                                                      Weight * max( tibble( .x )$.draw )
                                                    )
                                                  ) |> 
                                                  pull(
                                                    Draws
                                                  ),
                                                replace = FALSE
                                              )
                                          )
                                      ) |>
                                      enframe() |>
                                      rename(
                                        Imputation = name
                                      ) |>
                                      unnest(
                                        value
                                      ) |> 
                                      mutate(
                                        Model = "No int"
                                      )

sex_impute_int_sep_prediction_wts <- map2(
                                      sex_impute_int_sep_prediction,
                                      sex_impute_sep_kfold_sefix_wts,
                                      ~ (
                                          .x |> 
                                            tibble() |> 
                                            ungroup() |> 
                                            mutate(
                                              Div = paste0( Sex, "_", Period )
                                            ) |> 
                                            select(
                                              -c( .row, Sex, Period )
                                            ) |> 
                                            # Make wide
                                            pivot_wider(
                                              names_from = "Div",
                                              values_from = ".prediction"
                                            ) |> 
                                            group_by(
                                              Prediction
                                            ) |> 
                                            # Select weighted number of draws without replacement
                                            dplyr::sample_n(
                                              # First index is for no interaction
                                              size =  .y[ 2 ] |> 
                                                tibble() |> 
                                                rename(
                                                  Weight = everything()
                                                ) |> 
                                                mutate(
                                                  Draws = round(
                                                    Weight * max( tibble( .x )$.draw )
                                                  )
                                                ) |> 
                                                pull(
                                                  Draws
                                                ),
                                              replace = FALSE
                                            )
                                        )
                                    ) |>
                                    enframe() |>
                                    rename(
                                      Imputation = name
                                    ) |>
                                    unnest(
                                      value
                                    ) |> 
                                    mutate(
                                      Model = "Interaction"
                                    )

saveRDS( sex_impute_NOint_sep_prediction_wts, "sex_impute_NOint_sep_prediction_wts.rds" )
saveRDS( sex_impute_int_sep_prediction_wts, "sex_impute_int_sep_prediction_wts.rds" )

sex_impute_NOint_sep_prediction_wts <- readRDS( "sex_impute_NOint_sep_prediction_wts.rds" )
sex_impute_int_sep_prediction_wts <- readRDS( "sex_impute_int_sep_prediction_wts.rds" )

# Calculate sex ratio
sex_imp_1000predict <- bind_rows(
                          sex_impute_NOint_sep_prediction_wts,
                          sex_impute_int_sep_prediction_wts
                        ) |> 
                          rename(
                            PredictionNum = Prediction
                          ) |> 
                          pivot_longer(
                            `Female_Pre-spawn`:`Male_Spawning`,
                            names_to = "Div",
                            values_to = "Prediction"
                          ) |> 
                          separate_wider_delim(
                            cols = Div,
                            delim = "_",
                            names = c("Sex", "Period")
                          ) |> 
                          pivot_wider(
                            names_from = Sex,
                            values_from = Prediction
                          ) |> 
                          mutate(
                            `Female:Male` = Female / Male,
                            `Female:Male` = if_else(
                              Male == 0,
                              Female,
                              `Female:Male`
                            ),
                            `Female:Male` = if_else(
                              Female == 0,
                              ( 1 / Male ),
                              `Female:Male`
                            ),
                            `Female:Male` = if_else(
                              Female == 0 & Male == 0,
                              1,
                              `Female:Male`
                            )
                          )

saveRDS( sex_imp_1000predict, "sex_imp_1000predict.rds" )

sex_imp_1000predict <- readRDS( "sex_imp_1000predict.rds" )
```

## Stacked predictive distribution

```{r}
sex_imp_1000predict |> 
  select(
    Female,
    Male,
    `Female:Male`
  ) |> 
  posterior::summarize_draws()

Figure6_Obj2 <- sex_imp_1000predict |> 
                  ungroup() |> 
                  mutate(
                    Period = fct_rev( Period )
                  ) |>
                  ggplot(
                    aes(
                      x = `Female:Male`,
                      y = Period,
                      fill = after_stat( x )
                    )
                  ) +
                    ggdist::stat_slab(
                      aes(
                        color = after_stat( x )
                      ),
                      p_limits = c( 0.001, 0.999 ),
                      point_interval = ggdist::median_qi,
                      .width = c( 0.5, 0.89 ),
                      limits = c( 0, 200 ),
                      linewidth = 0.25
                    ) +
                    ggdist::stat_pointinterval(
                      point_interval = ggdist::median_qi,
                      limits = c( 0, 200 ),
                      .width = c( 0.5, 0.89 ),
                      position = position_dodge(
                        width = 0.5,
                        preserve = "single"
                      )
                    ) +
                    geom_vline(
                      xintercept = 1,
                      linetype = "dashed",
                      linewidth = 1
                    ) +
                    geom_vline(
                      xintercept = 2,
                      linetype = "dotted",
                      linewidth = 1
                    ) +
                    geom_vline(
                      xintercept = 0.5,
                      linetype = "dotted",
                      linewidth = 1
                    ) +
                    theme_classic() +
                    coord_trans( x = 'log10' ) +
                    scale_x_continuous(
                      expression( italic( "T*" )~"Female:Male" ),
                      breaks = c( 0, 0.1, 0.2, 0.5, 1, 2, 5, 10, 25, 50, 100, 200 ),
                    ) +
                    labs(
                      y = ""
                    ) +
                    theme(
                      legend.position = "none",
                      axis.text = element_text( size = 11 ),
                      axis.title = element_text( size = 13 ),
                      panel.border = element_rect(
                        color = "black",
                        fill = NA,
                        linewidth = 1.5
                      )
                    ) + 
                    scale_fill_gradient2(
                      low = "#558aa6",
                      mid = "#D7263D",
                      high = "#D7263D",
                      na.value = "#D7263D",
                      midpoint = 2.5,
                      limits = c( NA, 3 )
                    ) +
                    scale_color_gradient2(
                      low = "#558aa6",
                      mid = "#D7263D",
                      high = "#D7263D",
                      na.value = "#D7263D",
                      midpoint = 2.5,
                      limits = c( NA, 3 )
                    )

ggsave( "Figure6_Obj2.tiff", plot = Figure6_Obj2, dpi = 350, width = 9, height = 6, units = "in" )
```

### Bottom net catch

```{r}
sex_imp_1000predict |> 
  mutate(
    Female_bottom = 1000 - Female,
    Male_bottom = 1000 - Male,
    `Male:Female_bottom` = Male_bottom / Female_bottom,
    `Male:Female_bottom` = if_else(
        Female_bottom == 0,
        Male_bottom,
        `Male:Female_bottom`
      ),
      `Male:Female_bottom` = if_else(
        Male_bottom == 0,
        ( 1 / Female_bottom ),
        `Male:Female_bottom`
      ),
      `Male:Female_bottom` = if_else(
        Female_bottom == 0 & Male_bottom == 0,
        1,
        `Male:Female_bottom`
      )
  ) |> 
  select(
    Female_bottom,
    Male_bottom,
    `Male:Female_bottom`
  ) |> 
  posterior::summarize_draws()

sex_imp_1000predict |> 
  ungroup() |> 
  mutate(
    Female_bottom = 1000 - Female,
    Male_bottom = 1000 - Male,
    `Male:Female_bottom` = Male_bottom / Female_bottom,
    `Male:Female_bottom` = if_else(
        Female_bottom == 0,
        Male_bottom,
        `Male:Female_bottom`
      ),
      `Male:Female_bottom` = if_else(
        Male_bottom == 0,
        ( 1 / Female_bottom ),
        `Male:Female_bottom`
      ),
      `Male:Female_bottom` = if_else(
        Female_bottom == 0 & Male_bottom == 0,
        1,
        `Male:Female_bottom`
      ),
    Period = fct_rev( Period )
  ) |>
  ggplot(
    aes(
      x = `Male:Female_bottom`,
      y = Period,
      fill = after_stat( x )
    )
  ) +
    ggdist::stat_slab(
      aes(
        color = after_stat( x )
      ),
      p_limits = c( 0.001, 0.999 ),
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      limits = c( 0, 200 ),
      linewidth = 0.25
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      limits = c( 0, 200 ),
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      xintercept = 1,
      linetype = "dashed",
      linewidth = 1
    ) +
    geom_vline(
      xintercept = 2,
      linetype = "dotted",
      linewidth = 1
    ) +
    geom_vline(
      xintercept = 0.5,
      linetype = "dotted",
      linewidth = 1
    ) +
    theme_bw() +
    coord_trans( x = 'log10' ) +
    scale_x_continuous(
      expression( italic( "B*" )~"Male:Female" ),
      breaks = c( 0, 0.1, 0.2, 0.5, 1, 2, 5, 10, 25, 50, 100, 200 ),
    ) +
    labs(
      y = ""
    ) +
    theme(
      legend.position = "none",
      text = element_text(
        size = 20
      )
    ) + 
    scale_fill_gradient2(
      low = "#D7263D",
      mid = "#558aa6",
      high = "#558aa6",
      na.value = "#558aa6",
      midpoint = 2.5,
      limits = c( NA, 3 )
    ) +
    scale_color_gradient2(
      low = "#D7263D",
      mid = "#558aa6",
      high = "#558aa6",
      na.value = "#558aa6",
      midpoint = 2.5,
      limits = c( NA, 3 )
    )
```

## Hypothesis support

```{r}
ROPE_summary_sexratio_mice <- bind_rows(
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Pre-spawn"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 0.5, 2 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Pre-spawn",
                                    Hypothesis = "Null"
                                  ),
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Pre-spawn"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 0, 0.5 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Pre-spawn",
                                    Hypothesis = "Male bias"
                                  ),
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Pre-spawn"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 2, 1000 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Pre-spawn",
                                    Hypothesis = "Female bias"
                                  ),
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Spawning"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 0.5, 2 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Spawning",
                                    Hypothesis = "Null"
                                  ),
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Spawning"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 0, 0.5 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Spawning",
                                    Hypothesis = "Male bias"
                                  ),
                                sex_imp_1000predict |> 
                                  filter(
                                    Period == "Spawning"
                                  ) |> 
                                  select(
                                    `Female:Male`
                                  ) |> 
                                  bayestestR::rope(
                                    range = c( 2, 1000 ),
                                    ci = 1
                                  ) |> 
                                  as_tibble() |> 
                                  mutate(
                                    Period = "Spawning",
                                    Hypothesis = "Female bias"
                                  )
                              ) |> 
                              select(Parameter, ROPE_Percentage:Hypothesis) |> 
                              pivot_wider(
                                names_from = Hypothesis,
                                values_from = ROPE_Percentage
                              ) |> 
                              arrange(
                                Period
                              )

ROPE_summary_sexratio_mice |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 2 Hypothesis support",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

ROPE_summary_sexratio_mice |> 
  pivot_longer(
    Null:`Female bias`,
    names_to = "Hypothesis",
    values_to = "Support"
  ) |> 
  mutate(
    Hypothesis = case_when(
      Hypothesis == "Null" ~ "H0",
      Hypothesis == "Male bias" ~ "H1",
      Hypothesis == "Female bias" ~ "H2"
    )
  ) |> 
  ggplot(
    aes(
        x = Hypothesis,
        y = Support,
        fill = Hypothesis,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      cols = vars( Period ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      limits = c( 0, 1 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_discrete(
      "",
      labels = c( expression( italic(H)[0] ), expression( italic(H)[1] ), expression( italic(H)[2] ) )
    ) +
    viridis::scale_fill_viridis(
      labels = c(
        "H0" = bquote(italic(H)[italic('0')]~'- no bias'),
        "H1" = bquote(italic(H)[italic('1')]~'- male bias'),
        "H2" = bquote(italic(H)[italic('2')]~'- female bias')
      ),
      discrete = TRUE,
      option = "D"
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

## Contrast

```{r}
PredSex_contrast <- bind_rows(
                      sex_impute_NOint_sep_prediction_wts,
                      sex_impute_int_sep_prediction_wts
                    ) |> 
                      rename(
                        PredictionNum = Prediction
                      ) |> 
                      mutate(
                        Female_Diff = `Female_Spawning` - `Female_Pre-spawn`,
                        Male_Diff = `Male_Spawning` - `Male_Pre-spawn`
                      ) |> 
                      select(
                        -c( `Female_Pre-spawn`:`Male_Spawning` )
                      ) |> 
                      pivot_longer(
                        Female_Diff:Male_Diff,
                        names_to = "Parameter",
                        values_to = "Estimate"
                      ) |> 
                      mutate(
                        Sex = if_else(
                          Parameter == "Female_Diff",
                          "Female",
                          "Male"
                        )
                      )

PredSex_contrast |> 
  select(
    -Sex
  ) |> 
  pivot_wider(
    names_from = "Parameter",
    values_from = "Estimate"
  ) |> 
  select(
    Female_Diff:Male_Diff
  ) |> 
  posterior::summarize_draws()

Sex_ImpPredCont_pd <- PredSex_contrast |> 
                        select(
                          -Sex
                        ) |> 
                        pivot_wider(
                          names_from = "Parameter",
                          values_from = "Estimate"
                        ) |> 
                        select(
                          Female_Diff:Male_Diff
                        ) |> 
                        bayestestR::pd() |> 
                        as_tibble() |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", tolower( Parameter ) ),
                            "Female",
                            "Male"
                          ),
                          x = 600,
                          y = if_else(
                            Sex == "Male",
                            0.65,
                            0.75
                          ),
                          label = paste( Sex, "contrast pd:", round( pd, digits = 4 ) )
                        )

PredSex_contrast |> 
  ggplot(
    aes(
      x = Estimate,
      color = Sex,
      fill = Sex
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0
      ),
      linetype = "dashed"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    geom_text(
      data = Sex_ImpPredCont_pd,
      aes(
        x = x,
        y = y,
        color = Sex,
        label = label
      ),
      size = 8,
      show.legend = FALSE
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.93 )
    ) +
    scale_color_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "E( Top Net | Catch ) Contrast: Prespawn to spawning",
      limits = c( -1000 , 1000 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    )
```

# Objective 3

## Build models

```{r}
# Make the maturity summaries a list by period
imputed_cisco_mat_prespawn_list <- imputed_cisco_data_wide_withmat |>
                                      filter(
                                        Period == "Pre-spawn",
                                        !( is.na( Total ) )
                                      ) |>
                                      mutate(
                                        .imp = factor( .imp )
                                      ) |>
                                      group_by(
                                        .imp
                                      ) |> 
                                      nest() |> 
                                      deframe()

imputed_cisco_mat_spawning_list <- imputed_cisco_data_wide_withmat |>
                                      filter(
                                        Period == "Spawning",
                                        !( is.na( Total ) )
                                      ) |>
                                      mutate(
                                        .imp = factor( .imp )
                                      ) |>
                                      group_by(
                                        .imp
                                      ) |> 
                                      nest() |> 
                                      deframe()

# Pre-spawn
## No interaction
mat_impute_pre_NOint_sep <- brm_multiple(
                              data = imputed_cisco_mat_prespawn_list,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|PlotDate ) + Maturity + Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars( all = T ),
                              combine = FALSE
                            )
saveRDS(
  mat_impute_pre_NOint_sep,
  "mat_impute_pre_NOint_sep.rds"
)

# mat_impute_pre_NOint_sep <- readRDS("mat_impute_pre_NOint_sep.rds")

## Interaction
mat_impute_pre_int_sep <- brm_multiple(
                              data = imputed_cisco_mat_prespawn_list,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|PlotDate ) + Maturity + Sex + Maturity*Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars( all = T ),
                              combine = FALSE
                            )
saveRDS(
  mat_impute_pre_int_sep,
  "mat_impute_pre_int_sep.rds"
)

# mat_impute_pre_int_sep <- readRDS("mat_impute_pre_int_sep.rds")

# Spawning
## No interaction
mat_impute_spawn_NOint_sep <- brm_multiple(
                              data = imputed_cisco_mat_spawning_list,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|PlotDate ) + Maturity + Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars( all = T ),
                              combine = FALSE
                            )
saveRDS(
  mat_impute_spawn_NOint_sep,
  "mat_impute_spawn_NOint_sep.rds"
)

# mat_impute_spawn_NOint_sep <- readRDS("mat_impute_spawn_NOint_sep.rds")

## Interaction
mat_impute_spawn_int_sep <- brm_multiple(
                              data = imputed_cisco_mat_spawning_list,
                              family = binomial,
                              Top | trials( Total ) ~ ( 1|PlotDate ) + Maturity + Sex + Maturity*Sex,
                              iter = 2000,
                              warmup = 1000,
                              cores = 4,
                              chains = 4,
                              seed = 152,
                              prior = c(
                                prior(
                                  normal( 0, 2 ),
                                  class = Intercept
                                ),
                                prior(
                                  normal( 0, 2 ),
                                  class = b
                                ),
                                prior(
                                  exponential( 1 ),
                                  class = sd
                                )
                              ),
                              control = list(
                                adapt_delta = 0.95
                              ),
                              backend = "cmdstanr",
                              sample_prior = TRUE,
                              save_pars = save_pars( all = T ),
                              combine = FALSE
                            )
saveRDS(
  mat_impute_spawn_int_sep,
  "mat_impute_spawn_int_sep.rds"
)

# mat_impute_spawn_int_sep <- readRDS("mat_impute_spawn_int_sep.rds")
```

## Diagnostics

```{r}
# Numerical

# Calculate degrees of freedom - https://stefvanbuuren.name/fimd/sec-whyandwhen.html MICE formula
mat_impute_sep_summary <- bind_rows(
                            mat_impute_pre_NOint_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "No interaction",
                                      Period = "Pre-spawn",
                                      Iteration = .y
                                    )
                                )
                              ),
                            mat_impute_pre_int_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "Interaction",
                                      Period = "Pre-spawn",
                                      Iteration = .y
                                    )
                                )
                              ),
                            mat_impute_spawn_NOint_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
                                      p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "No interaction",
                                      Period = "Spawning",
                                      Iteration = .y
                                    )
                                )
                              ),
                            mat_impute_spawn_int_sep |> 
                              imap_dfr(
                                ~ (
                                  .x |> 
                                    as_draws_df() |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
                                      p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent + `b_MaturitySpent:SexMale` )
                                    ) |> 
                                    posterior::summarize_draws() |> 
                                    mutate(
                                      Model = "Interaction",
                                      Period = "Spawning",
                                      Iteration = .y
                                    )
                                )
                              )
)

mat_impute_sep_summary |> 
  filter(
    ess_bulk < 400 | ess_tail < 400
  )

mat_impute_sep_summary |> 
  filter(
    round( rhat, digits = 2 ) > 1.01
  )

mat_impute_sep_summary |> 
  mutate(
    across(
      c( variable, Model, Iteration ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Diagnostics for Ojective 3 MICE models",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

# Graphical

# Trace plots
mat_impute_pre_NOint_sep_trace <- mat_impute_pre_NOint_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_trace() +
                                          theme_bw() +
                                          ggtitle( paste( "Pre-spawn No Int Imp:", .y ) )
                                      )
                                    )

mat_impute_pre_int_sep_trace <- mat_impute_pre_int_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_trace() +
                                          theme_bw() +
                                          ggtitle( paste( "Pre-spawn Int Imp:", .y ) )
                                      )
                                    )

mat_impute_spawn_NOint_sep_trace <- mat_impute_spawn_NOint_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_trace() +
                                          theme_bw() +
                                          ggtitle( paste( "Spawning No Int Imp:", .y ) )
                                      )
                                    )

mat_impute_spawn_int_sep_trace <- mat_impute_spawn_int_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_trace() +
                                          theme_bw() +
                                          ggtitle( paste( "Spawning Int Imp:", .y ) )
                                      )
                                    )

# Trace rank
mat_impute_pre_NOint_sep_trank <- mat_impute_pre_NOint_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_rank_overlay() +
                                          theme_bw() +
                                          ggtitle( paste( "Pre-spawn No Int Imp:", .y ) )
                                      )
                                    )

mat_impute_pre_int_sep_trank <- mat_impute_pre_int_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_rank_overlay() +
                                          theme_bw() +
                                          ggtitle( paste( "Pre-spawn Int Imp:", .y ) )
                                      )
                                    )

mat_impute_spawn_NOint_sep_trank <- mat_impute_spawn_NOint_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_rank_overlay() +
                                          theme_bw() +
                                          ggtitle( paste( "Spawning No Int Imp:", .y ) )
                                      )
                                    )

mat_impute_spawn_int_sep_trank <- mat_impute_spawn_int_sep |>
                                    imap(
                                      ~ (
                                        .x |> 
                                          as_draws_df() |>   
                                          select(
                                            -c( prior_Intercept, prior_b, prior_sd_PlotDate, lprior )
                                          ) |> 
                                          bayesplot::mcmc_rank_overlay() +
                                          theme_bw() +
                                          ggtitle( paste( "Spawning Int Imp:", .y ) )
                                      )
                                    )

# Posterior prediction
## Pre-spawn
imputed_cisco_mat_pre_list_plot <- imputed_cisco_mat_prespawn_list |> 
                                    map(
                                      ~ (
                                        .x |> 
                                          mutate(
                                            case = factor(
                                              1:length( Sex )
                                            ),
                                            Label = paste0(
                                              PlotDate,
                                              "-",
                                              substr(
                                                Maturity,
                                                start = 1,
                                                stop = 1
                                              ),
                                              "-",
                                              substr(
                                                Sex,
                                                start = 1,
                                                stop = 1
                                              )
                                            )
                                          )
                                      )
                                    )

prediction_mat_pre_impute_NOint_sep <- map2(
                                        mat_impute_pre_NOint_sep,
                                        imputed_cisco_mat_pre_list_plot,
                                        ~ (
                                          predict( .x ) |> 
                                            as_tibble() |> 
                                            bind_cols( .y )
                                        )
                                      )

prediction_mat_pre_impute_int_sep <- map2(
                                      mat_impute_pre_int_sep,
                                      imputed_cisco_mat_pre_list_plot,
                                      ~ (
                                        predict( .x ) |> 
                                          as_tibble() |> 
                                          bind_cols( .y )
                                      )
                                    )

plot_mat_pre_impute_NOint_sep <- imap(
                                  imputed_cisco_mat_pre_list_plot,
                                    ~ (
                                      .x |> 
                                        ggplot(
                                          aes(
                                            x = Label,
                                            y = Top / Total
                                          )
                                        ) +
                                          geom_pointrange(
                                            data = prediction_mat_pre_impute_NOint_sep[[ as.numeric( .y ) ]],
                                            aes(
                                              y = Estimate / Total,
                                              ymin = Q2.5 / Total,
                                              ymax = Q97.5 / Total,
                                              linetype = Maturity
                                            ),
                                            shape = 1
                                          ) +
                                          geom_point(
                                            aes(
                                              color = Sex
                                            ),
                                            size = 2
                                          ) +
                                          geom_text(
                                            data = .x,
                                            aes(
                                              x = Label,
                                              y = 1.01,
                                              label = Total,
                                            )
                                          ) +
                                          theme_bw() +
                                          labs(
                                            title = paste(
                                              "Posterior validation check - mat pre with no interaction, Imp:",
                                              .y
                                            ),
                                            color = "",
                                            linetype = "",
                                            x = NULL
                                          ) +
                                          coord_cartesian(
                                            ylim = c( 0, 1 )
                                          ) +
                                          theme(
                                            axis.text.x = element_text(
                                              angle = 270,
                                              vjust = 0.5,
                                              hjust = 0
                                            )
                                          )
                                    )
                                  )

plot_mat_pre_impute_int_sep <- imap(
                                  imputed_cisco_mat_pre_list_plot,
                                    ~ (
                                      .x |> 
                                        ggplot(
                                          aes(
                                            x = Label,
                                            y = Top / Total
                                          )
                                        ) +
                                          geom_pointrange(
                                            data = prediction_mat_pre_impute_int_sep[[ as.numeric( .y ) ]],
                                            aes(
                                              y = Estimate / Total,
                                              ymin = Q2.5 / Total,
                                              ymax = Q97.5 / Total,
                                              linetype = Maturity
                                            ),
                                            shape = 1
                                          ) +
                                          geom_point(
                                            aes(
                                              color = Sex
                                            ),
                                            size = 2
                                          ) +
                                          geom_text(
                                            data = .x,
                                            aes(
                                              x = Label,
                                              y = 1.01,
                                              label = Total,
                                            )
                                          ) +
                                          theme_bw() +
                                          labs(
                                            title = paste(
                                              "Posterior validation check - mat pre with interaction, Imp:",
                                              .y
                                            ),
                                            color = "",
                                            linetype = "",
                                            x = NULL
                                          ) +
                                          coord_cartesian(
                                            ylim = c( 0, 1 )
                                          ) +
                                          theme(
                                            axis.text.x = element_text(
                                              angle = 270,
                                              vjust = 0.5,
                                              hjust = 0
                                            )
                                          )
                                    )
                                  )

## Spawning
imputed_cisco_mat_spawn_list_plot <- imputed_cisco_mat_spawning_list |> 
                                      map(
                                        ~ (
                                          .x |> 
                                            mutate(
                                              case = factor(
                                                1:length( Sex )
                                              ),
                                              Label = paste0(
                                                PlotDate,
                                                "-",
                                                substr(
                                                  Maturity,
                                                  start = 1,
                                                  stop = 1
                                                ),
                                                "-",
                                                substr(
                                                  Sex,
                                                  start = 1,
                                                  stop = 1
                                                )
                                              )
                                            )
                                        )
                                      )

prediction_mat_spawn_impute_NOint_sep <- map2(
                                          mat_impute_spawn_NOint_sep,
                                          imputed_cisco_mat_spawn_list_plot,
                                          ~ (
                                            predict( .x ) |> 
                                              as_tibble() |> 
                                              bind_cols( .y )
                                          )
                                        )

prediction_mat_spawn_impute_int_sep <- map2(
                                        mat_impute_spawn_int_sep,
                                        imputed_cisco_mat_spawn_list_plot,
                                        ~ (
                                          predict( .x ) |> 
                                            as_tibble() |> 
                                            bind_cols( .y )
                                        )
                                      )

plot_mat_spawn_impute_NOint_sep <- imap(
                                    imputed_cisco_mat_spawn_list_plot,
                                      ~ (
                                        .x |> 
                                          ggplot(
                                            aes(
                                              x = Label,
                                              y = Top / Total
                                            )
                                          ) +
                                            geom_pointrange(
                                              data = prediction_mat_spawn_impute_NOint_sep[[ as.numeric( .y ) ]],
                                              aes(
                                                y = Estimate / Total,
                                                ymin = Q2.5 / Total,
                                                ymax = Q97.5 / Total,
                                                linetype = Maturity
                                              ),
                                              shape = 1
                                            ) +
                                            geom_point(
                                              aes(
                                                color = Sex
                                              ),
                                              size = 2
                                            ) +
                                            geom_text(
                                              data = .x,
                                              aes(
                                                x = Label,
                                                y = 1.01,
                                                label = Total,
                                              )
                                            ) +
                                            theme_bw() +
                                            labs(
                                              title = paste(
                                                "Posterior validation check - mat spawn with no interaction, Imp:",
                                                .y
                                              ),
                                              color = "",
                                              linetype = "",
                                              x = NULL
                                            ) +
                                            coord_cartesian(
                                              ylim = c( 0, 1 )
                                            ) +
                                            theme(
                                              axis.text.x = element_text(
                                                angle = 270,
                                                vjust = 0.5,
                                                hjust = 0
                                              )
                                            )
                                      )
                                    )

plot_mat_spawn_impute_int_sep <- imap(
                                  imputed_cisco_mat_spawn_list_plot,
                                    ~ (
                                      .x |> 
                                        ggplot(
                                          aes(
                                            x = Label,
                                            y = Top / Total
                                          )
                                        ) +
                                          geom_pointrange(
                                            data = prediction_mat_spawn_impute_int_sep[[ as.numeric( .y ) ]],
                                            aes(
                                              y = Estimate / Total,
                                              ymin = Q2.5 / Total,
                                              ymax = Q97.5 / Total,
                                              linetype = Maturity
                                            ),
                                            shape = 1
                                          ) +
                                          geom_point(
                                            aes(
                                              color = Sex
                                            ),
                                            size = 2
                                          ) +
                                          geom_text(
                                            data = .x,
                                            aes(
                                              x = Label,
                                              y = 1.01,
                                              label = Total,
                                            )
                                          ) +
                                          theme_bw() +
                                          labs(
                                            title = paste(
                                              "Posterior validation check - mat spawn with interaction, Imp:",
                                              .y
                                            ),
                                            color = "",
                                            linetype = "",
                                            x = NULL
                                          ) +
                                          coord_cartesian(
                                            ylim = c( 0, 1 )
                                          ) +
                                          theme(
                                            axis.text.x = element_text(
                                              angle = 270,
                                              vjust = 0.5,
                                              hjust = 0
                                            )
                                          )
                                    )
                                  )

# Save images

fs::dir_create( "Obj3Diagnostics" )

fs::dir_create( "Obj3Diagnostics/Trace" )

# Prespawn
mat_pre_NOint_traceplot_paths <- str_glue( "Obj3Diagnostics/Trace/{1:100}_pre_NOint_traceplot.png" )

walk2(
  mat_pre_NOint_traceplot_paths,
  mat_impute_pre_NOint_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

mat_pre_int_traceplot_paths <- str_glue( "Obj3Diagnostics/Trace/{1:100}_pre_int_traceplot.png" )

walk2(
  mat_pre_int_traceplot_paths,
  mat_impute_pre_int_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

# Spawning
mat_spawn_NOint_traceplot_paths <- str_glue( "Obj3Diagnostics/Trace/{1:100}_spawn_NOint_traceplot.png" )

walk2(
  mat_spawn_NOint_traceplot_paths,
  mat_impute_spawn_NOint_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

mat_spawn_int_traceplot_paths <- str_glue( "Obj3Diagnostics/Trace/{1:100}_spawn_int_traceplot.png" )

walk2(
  mat_spawn_int_traceplot_paths,
  mat_impute_spawn_int_sep_trace,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

fs::dir_create( "Obj3Diagnostics/Trank" )

# Prespawn
mat_pre_NOint_trankplot_paths <- str_glue( "Obj3Diagnostics/Trank/{1:100}_pre_NOint_trankplot.png" )

walk2(
  mat_pre_NOint_trankplot_paths,
  mat_impute_pre_NOint_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

mat_pre_int_trankplot_paths <- str_glue( "Obj3Diagnostics/Trank/{1:100}_pre_int_trankplot.png" )

walk2(
  mat_pre_int_trankplot_paths,
  mat_impute_pre_int_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

# Spawn
mat_spawn_NOint_trankplot_paths <- str_glue( "Obj3Diagnostics/Trank/{1:100}_spawn_NOint_trankplot.png" )

walk2(
  mat_spawn_NOint_trankplot_paths,
  mat_impute_spawn_NOint_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

mat_spawn_int_trankplot_paths <- str_glue( "Obj3Diagnostics/Trank/{1:100}_spawn_int_trankplot.png" )

walk2(
  mat_spawn_int_trankplot_paths,
  mat_impute_spawn_int_sep_trank,
  \( path, plot ) ggsave( path, plot, width = 20, height = 15 )
)

fs::dir_create( "Obj3Diagnostics/PPC" )

# Prespawn
mat_pre_NOint_ppc_paths <- str_glue( "Obj3Diagnostics/PPC/{1:100}_pre_NOint_ppcplot.png" )

walk2(
  mat_pre_NOint_ppc_paths,
  plot_mat_pre_impute_NOint_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)

mat_pre_int_ppc_paths <- str_glue( "Obj3Diagnostics/PPC/{1:100}_pre_int_ppcplot.png" )

walk2(
  mat_pre_int_ppc_paths,
  plot_mat_pre_impute_int_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)

# Spawn
mat_spawn_NOint_ppc_paths <- str_glue( "Obj3Diagnostics/PPC/{1:100}_spawn_NOint_ppcplot.png" )

walk2(
  mat_spawn_NOint_ppc_paths,
  plot_mat_spawn_impute_NOint_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)

mat_spawn_int_ppc_paths <- str_glue( "Obj3Diagnostics/PPC/{1:100}_spawn_int_ppcplot.png" )

walk2(
  mat_spawn_int_ppc_paths,
  plot_mat_spawn_impute_int_sep,
  \( path, plot ) ggsave( path, plot, width = 15, height = 10 )
)
```

## LOGO CV

```{r}
# Pre spawn
mat_impute_pre_int_sep_kfold <- mat_impute_pre_int_sep |> 
                                  map(
                                    ~ kfold(
                                        .x,
                                        group = "PlotDate"
                                      )
                                  )

saveRDS(
  mat_impute_pre_int_sep_kfold,
  "mat_impute_pre_int_sep_kfold.rds"
)

# mat_impute_pre_int_sep_kfold <- readRDS("mat_impute_pre_int_sep_kfold.rds")

mat_impute_pre_NOint_sep_kfold <- mat_impute_pre_NOint_sep |> 
                                    map(
                                      ~ kfold(
                                          .x,
                                          group = "PlotDate"
                                        )
                                    )

saveRDS(
  mat_impute_pre_NOint_sep_kfold,
  "mat_impute_pre_NOint_sep_kfold.rds"
)

# mat_impute_pre_NOint_sep_kfold <- readRDS("mat_impute_pre_NOint_sep_kfold.rds")

# Function to group folds for correct Standard Error estimates
cvgfix <- function( cv, cvidx ) {
    groupwise = numeric();
    K <- length( unique( cvidx ) )
    for ( i in 1:K ) { 
      groupwise[ i ] = sum( cv$pointwise[ cvidx == i, "elpd_kfold" ] )
    }
    
    cv$pointwise <- cbind( elpd_kfolds = groupwise )
    cv$se_elpd_kfold <- sd( groupwise ) * sqrt( K )
    cv$estimates[ 2 ] <- cv$se_elpd_kfold
    cv
}

# Function to get proper fold layout to use in function
cvfolds_pre <- loo::kfold_split_grouped(
                  K = imputed_cisco_mat_prespawn_list[[1]] |> 
                    distinct(PlotDate) |> 
                    nrow(),
                  x = imputed_cisco_mat_prespawn_list[[1]] |> 
                    mutate(
                      # Remove any potential effect the levels might have on what happens next
                      PlotDate = factor(PlotDate)
                    ) |> 
                    pull(PlotDate)
                )

mat_impute_pre_int_sep_kfold_sefix <- mat_impute_pre_int_sep_kfold |> 
                                        map(
                                          ~ cvgfix(
                                            .x,
                                            cvfolds_pre
                                          )
                                        )

mat_impute_pre_NOint_sep_kfold_sefix <- mat_impute_pre_NOint_sep_kfold |> 
                                        map(
                                          ~ cvgfix(
                                            .x,
                                            cvfolds_pre
                                          )
                                        )

mat_impute_pre_sep_kfold_sefix_comparelist <- map2(
                                                mat_impute_pre_NOint_sep_kfold_sefix,
                                                mat_impute_pre_int_sep_kfold_sefix,
                                                ~ loo::loo_compare(
                                                  list("No_Int" = .x, "Int" = .y)
                                                )
                                              )

mat_impute_pre_sep_kfold_sefix_elpd <- map2(
                                          mat_impute_pre_NOint_sep_kfold_sefix,
                                          mat_impute_pre_int_sep_kfold_sefix,
                                          ~ cbind(
                                              "No_Int" =.x$pointwise[, "elpd_kfolds"],
                                              "Int" = .y$pointwise[, "elpd_kfolds"]
                                            )
                                        )

mat_impute_pre_sep_kfold_sefix_wts <- mat_impute_pre_sep_kfold_sefix_elpd |> 
                                              map(
                                                loo::stacking_weights
                                              )

saveRDS(
  mat_impute_pre_sep_kfold_sefix_wts,
  "mat_impute_pre_sep_kfold_sefix_wts.rds"
)

# mat_impute_pre_sep_kfold_sefix_wts <- readRDS( "mat_impute_pre_sep_kfold_sefix_wts.rds" )

mat_impute_pre_LOGOCV_ests <- mat_impute_pre_sep_kfold_sefix_comparelist |> 
                                imap_dfr(
                                  ~ (
                                    bind_rows(
                                      .x[ "No_Int", ] |> 
                                        as_tibble_row() |> 
                                        mutate(
                                          Model = "No_Int",
                                          Iteration = .y
                                        ),
                                      .x[ "Int", ] |> 
                                        as_tibble_row() |> 
                                        mutate(
                                          Model = "Int",
                                          Iteration = .y
                                        )
                                    )
                                  )
                                ) |> 
                                left_join(
                                  mat_impute_pre_sep_kfold_sefix_wts |> 
                                    imap_dfr(
                                      ~ (
                                        bind_rows(
                                          .x[ "model1" ] |> 
                                            as_tibble() |> 
                                            rename(
                                              weight = 1
                                            ) |> 
                                            mutate(
                                              Model = "No_Int",
                                              Iteration = .y
                                            ),
                                          .x[ "model2" ] |> 
                                            as_tibble() |> 
                                            rename(
                                              weight = 1
                                            ) |> 
                                            mutate(
                                              Model = "Int",
                                              Iteration = .y
                                            )
                                        )
                                      )
                                    ),
                                  by = c( "Model", "Iteration" )
                                ) |> 
                                mutate(
                                  Period = "Pre-spawn"
                                ) |> 
                                select(
                                  Period, Model, Iteration, weight, elpd_kfold, elpd_diff, se_elpd_kfold, se_diff, everything()
                                )

# Spawning
mat_impute_spawn_int_sep_kfold <- mat_impute_spawn_int_sep |> 
                                    map(
                                      ~ kfold(
                                          .x,
                                          group = "PlotDate"
                                        )
                                    )

saveRDS(
  mat_impute_spawn_int_sep_kfold,
  "mat_impute_spawn_int_sep_kfold.rds"
)

# mat_impute_spawn_int_sep_kfold <- readRDS("mat_impute_spawn_int_sep_kfold.rds")

mat_impute_spawn_NOint_sep_kfold <- mat_impute_spawn_NOint_sep |> 
                                      map(
                                        ~ kfold(
                                            .x,
                                            group = "PlotDate"
                                          )
                                      )

saveRDS(
  mat_impute_spawn_NOint_sep_kfold,
  "mat_impute_spawn_NOint_sep_kfold.rds"
)

# mat_impute_spawn_NOint_sep_kfold <- readRDS("mat_impute_spawn_NOint_sep_kfold.rds")

# Function to get proper fold layout to use in function
cvfolds_spawn <- loo::kfold_split_grouped(
                    K = imputed_cisco_mat_spawning_list[[1]] |> 
                      distinct(PlotDate) |> 
                      nrow(),
                    x = imputed_cisco_mat_spawning_list[[1]] |> 
                      mutate(
                        # Remove any potential effect the levels might have on what happens next
                        PlotDate = factor(PlotDate)
                      ) |> 
                      pull(PlotDate)
                  )

mat_impute_spawn_int_sep_kfold_sefix <- mat_impute_spawn_int_sep_kfold |> 
                                          map(
                                            ~ cvgfix(
                                              .x,
                                              cvfolds_spawn
                                            )
                                          )

mat_impute_spawn_NOint_sep_kfold_sefix <- mat_impute_spawn_NOint_sep_kfold |> 
                                            map(
                                              ~ cvgfix(
                                                .x,
                                                cvfolds_spawn
                                              )
                                            )

mat_impute_spawn_sep_kfold_sefix_comparelist <- map2(
                                                  mat_impute_spawn_NOint_sep_kfold_sefix,
                                                  mat_impute_spawn_int_sep_kfold_sefix,
                                                  ~ loo::loo_compare(
                                                    list("No_Int" = .x, "Int" = .y)
                                                  )
                                                )

mat_impute_spawn_sep_kfold_sefix_elpd <- map2(
                                            mat_impute_spawn_NOint_sep_kfold_sefix,
                                            mat_impute_spawn_int_sep_kfold_sefix,
                                            ~ cbind(
                                                "No_Int" =.x$pointwise[, "elpd_kfolds"],
                                                "Int" = .y$pointwise[, "elpd_kfolds"]
                                              )
                                          )

mat_impute_spawn_sep_kfold_sefix_wts <- mat_impute_spawn_sep_kfold_sefix_elpd |> 
                                          map(
                                            loo::stacking_weights
                                          )

saveRDS(
  mat_impute_spawn_sep_kfold_sefix_wts,
  "mat_impute_spawn_sep_kfold_sefix_wts.rds"
)

# mat_impute_spawn_sep_kfold_sefix_wts <- readRDS( "mat_impute_spawn_sep_kfold_sefix_wts.rds" )

mat_impute_spawn_LOGOCV_ests <- mat_impute_spawn_sep_kfold_sefix_comparelist |> 
                                imap_dfr(
                                  ~ (
                                    bind_rows(
                                      .x[ "No_Int", ] |> 
                                        as_tibble_row() |> 
                                        mutate(
                                          Model = "No_Int",
                                          Iteration = .y
                                        ),
                                      .x[ "Int", ] |> 
                                        as_tibble_row() |> 
                                        mutate(
                                          Model = "Int",
                                          Iteration = .y
                                        )
                                    )
                                  )
                                ) |> 
                                left_join(
                                  mat_impute_spawn_sep_kfold_sefix_wts |> 
                                    imap_dfr(
                                      ~ (
                                        bind_rows(
                                          .x[ "model1" ] |> 
                                            as_tibble() |> 
                                            rename(
                                              weight = 1
                                            ) |> 
                                            mutate(
                                              Model = "No_Int",
                                              Iteration = .y
                                            ),
                                          .x[ "model2" ] |> 
                                            as_tibble() |> 
                                            rename(
                                              weight = 1
                                            ) |> 
                                            mutate(
                                              Model = "Int",
                                              Iteration = .y
                                            )
                                        )
                                      )
                                    ),
                                  by = c( "Model", "Iteration" )
                                ) |> 
                                mutate(
                                  Period = "Spawning"
                                ) |> 
                                select(
                                  Period, Model, Iteration, weight, elpd_kfold, elpd_diff, se_elpd_kfold, se_diff, everything()
                                )

bind_rows(
  mat_impute_pre_LOGOCV_ests,
  mat_impute_spawn_LOGOCV_ests
) |> 
  mutate(
    across(
      c( Period, Model, Iteration ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 3 LOGO CV estimates",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

mat_impute_LOGOCV_summary <- bind_rows(
                                mat_impute_pre_LOGOCV_ests,
                                mat_impute_spawn_LOGOCV_ests
                              ) |> 
                                group_by(
                                  Period, Model
                                ) |> 
                                summarize(
                                  across( 
                                    weight:se_p_kfold,
                                    list(
                                      mean = mean,
                                      sd = sd,
                                      median = median,
                                      mad = mad,
                                      max = max,
                                      min = min
                                    ),
                                    .names = "{.col}.{.fn}"
                                  )
                                ) |> 
                                pivot_longer(
                                  -c( Period, Model ),
                                  names_to = "Param",
                                  values_to = "Est"
                                ) |> 
                                separate_wider_delim(
                                  cols = "Param",
                                  delim = ".",
                                  names = c( "Parameter", "Summary" )
                                ) |> 
                                pivot_wider(
                                  names_from = "Summary",
                                  values_from = "Est"
                                ) |> 
                                arrange(
                                  Parameter,
                                  Period,
                                  Model
                                ) |> 
                                ungroup()

mat_impute_LOGOCV_summary |> 
  mutate(
    across(
      c( Period, Model, Parameter ),
      factor
    )
  ) |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 3 LOGO CV summary",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )
```

### Weighting models

```{r}
# Pre spawn
## Need to tease out draws relative to each weight
mat_impute_pre_NOint_paramwt <- map2(
                                  mat_impute_pre_NOint_sep,
                                  mat_impute_pre_sep_kfold_sefix_wts,
                                  ~ (
                                      .x |> 
                                        as_draws_df() |> 
                                        tibble() |> 
                                        # Select weighted number of draws without replacement
                                        dplyr::slice_sample(
                                          # First index is for no interaction
                                          n =  .y[ 1 ] |> 
                                            tibble() |> 
                                            rename(
                                              Weight = everything()
                                            ) |> 
                                            mutate(
                                              Draws = round(
                                                Weight * nrow( as_draws_df( .x ) )
                                              )
                                            ) |> 
                                            pull(
                                              Draws
                                            ),
                                          replace = FALSE
                                        )
                                    )
                                )

mat_impute_pre_int_paramwt <- map2(
                                mat_impute_pre_int_sep,
                                mat_impute_pre_sep_kfold_sefix_wts,
                                ~ (
                                    .x |> 
                                      as_draws_df() |> 
                                      tibble() |> 
                                      # Select weighted number of draws without replacement
                                      dplyr::slice_sample(
                                        # Second index is for interaction
                                        n =  .y[ 2 ] |> 
                                          tibble() |> 
                                          rename(
                                            Weight = everything()
                                          ) |> 
                                          mutate(
                                            Draws = round(
                                              Weight * nrow( as_draws_df( .x ) )
                                            )
                                          ) |> 
                                          pull(
                                            Draws
                                          ),
                                        replace = FALSE
                                      )
                                  )
                              )

Mat_pre_ImpParamEsts_wt <- bind_rows(
                            mat_impute_pre_NOint_paramwt %>%
                              setNames(
                                nm = 1:length( . )
                              ) %>%
                              map(
                                ~ (
                                  .x |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe )
                                    ) |> 
                                    as_tibble()  |> 
                                    select( p_top_female_green:p_top_male_ripe, .chain, .iteration, .draw )
                                )
                              ) |> 
                              enframe() |> 
                              rename(
                                Imputation = name
                              ) |> 
                              unnest(
                                value
                              ) |> 
                              mutate(
                                Model = "No int",
                                Period = "Pre-spawn"
                              ),
                            mat_impute_pre_int_paramwt %>%
                              setNames(
                                nm = 1:length( . )
                              ) %>%
                              map(
                                ~ (
                                  .x |> 
                                    mutate(
                                      p_top_female_green = inv_logit_scaled( b_Intercept ),
                                      p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                      p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                      p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` )
                                    ) |> 
                                    as_tibble()  |> 
                                    select( p_top_female_green:p_top_male_ripe, .chain, .iteration, .draw )
                                )
                              ) |> 
                              enframe() |> 
                              rename(
                                Imputation = name
                              ) |> 
                              unnest(
                                value
                              ) |> 
                              mutate(
                                Model = "Interaction",
                                Period = "Pre-spawn"
                              )
                          )

# Spawning
## Need to tease out draws relative to each weight
mat_impute_spawn_NOint_paramwt <- map2(
                                      mat_impute_spawn_NOint_sep,
                                      mat_impute_spawn_sep_kfold_sefix_wts,
                                      ~ (
                                          .x |> 
                                            as_draws_df() |> 
                                            tibble() |> 
                                            # Select weighted number of draws without replacement
                                            dplyr::slice_sample(
                                              # First index is for no interaction
                                              n =  .y[ 1 ] |> 
                                                tibble() |> 
                                                rename(
                                                  Weight = everything()
                                                ) |> 
                                                mutate(
                                                  Draws = round(
                                                    Weight * nrow( as_draws_df( .x ) )
                                                  )
                                                ) |> 
                                                pull(
                                                  Draws
                                                ),
                                              replace = FALSE
                                            )
                                        )
                                    )

mat_impute_spawn_int_paramwt <- map2(
                                  mat_impute_spawn_int_sep,
                                  mat_impute_spawn_sep_kfold_sefix_wts,
                                  ~ (
                                      .x |> 
                                        as_draws_df() |> 
                                        tibble() |> 
                                        # Select weighted number of draws without replacement
                                        dplyr::slice_sample(
                                          # Second index is for interaction
                                          n =  .y[ 2 ] |> 
                                            tibble() |> 
                                            rename(
                                              Weight = everything()
                                            ) |> 
                                            mutate(
                                              Draws = round(
                                                Weight * nrow( as_draws_df( .x ) )
                                              )
                                            ) |> 
                                            pull(
                                              Draws
                                            ),
                                          replace = FALSE
                                        )
                                    )
                                )

# Weighted probability
Mat_spawn_ImpParamEsts_wt <- bind_rows(
                                mat_impute_spawn_NOint_paramwt %>%
                                  setNames(
                                    nm = 1:length( . )
                                  ) %>%
                                  map(
                                    ~ (
                                      .x |> 
                                        mutate(
                                          p_top_female_green = inv_logit_scaled( b_Intercept ),
                                          p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                          p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent ),
                                          p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                          p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe ),
                                          p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent )
                                        ) |> 
                                        as_tibble()  |> 
                                        select( p_top_female_green:p_top_male_spent, .chain, .iteration, .draw )
                                    )
                                  ) |> 
                                  enframe() |> 
                                  rename(
                                    Imputation = name
                                  ) |> 
                                  unnest(
                                    value
                                  ) |> 
                                  mutate(
                                    Model = "No int",
                                    Period = "Spawning"
                                  ),
                                mat_impute_spawn_int_paramwt %>%
                                  setNames(
                                    nm = 1:length( . )
                                  ) %>%
                                  map(
                                    ~ (
                                      .x |> 
                                        mutate(
                                          p_top_female_green = inv_logit_scaled( b_Intercept ),
                                          p_top_female_ripe = inv_logit_scaled( b_Intercept + b_MaturityRipe ),
                                          p_top_female_spent = inv_logit_scaled( b_Intercept + b_MaturitySpent ),
                                          p_top_male_green = inv_logit_scaled( b_Intercept + b_SexMale ),
                                          p_top_male_ripe = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturityRipe + `b_MaturityRipe:SexMale` ),
                                          p_top_male_spent = inv_logit_scaled( b_Intercept + b_SexMale + b_MaturitySpent + `b_MaturitySpent:SexMale` )
                                        ) |> 
                                        as_tibble()  |> 
                                        select( p_top_female_green:p_top_male_spent, .chain, .iteration, .draw )
                                    )
                                  ) |> 
                                  enframe() |> 
                                  rename(
                                    Imputation = name
                                  ) |> 
                                  unnest(
                                    value
                                  ) |> 
                                  mutate(
                                    Model = "Interaction",
                                    Period = "Spawning"
                                  )
                              )

# Contrasts
Mat_ImpParamCont_wt <- bind_cols(
                          Mat_pre_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green:p_top_male_ripe
                            ) |> 
                            rename_with(
                              ~ paste0( .x, "_pre" )
                            ),
                          Mat_spawn_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green, p_top_female_ripe, p_top_male_green, p_top_male_ripe, p_top_female_spent, p_top_male_spent
                            ) |> 
                            rename_with(
                              ~ paste0( .x, "_spawn" )
                            )
                        ) |> 
                        mutate(
                          p_top_female_green_cont = p_top_female_green_spawn - p_top_female_green_pre,
                          p_top_female_ripe_cont = p_top_female_ripe_spawn - p_top_female_ripe_pre,
                          p_top_male_green_cont = p_top_male_green_spawn - p_top_male_green_pre,
                          p_top_male_ripe_cont = p_top_male_ripe_spawn - p_top_male_ripe_pre,
                          p_top_femaletomale_pre_green_cont = p_top_female_green_pre - p_top_male_green_pre,
                          p_top_femaletomale_spawn_green_cont = p_top_female_green_spawn - p_top_male_green_spawn,
                          p_top_femaletomale_pre_ripe_cont = p_top_female_ripe_pre - p_top_male_ripe_pre,
                          p_top_femaletomale_spawn_ripe_cont = p_top_female_ripe_spawn - p_top_male_ripe_spawn,
                          p_top_femaletomale_spawn_spent_cont = p_top_female_spent_spawn - p_top_male_spent_spawn
                        ) |> 
                        select(
                          contains( "_cont" )
                        ) |> 
                        pivot_longer(
                          everything(),
                          names_to = "Param",
                          values_to = "Estimate"
                        ) |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", Param ),
                            "Female",
                            "Male"
                          ),
                          Maturity = case_when(
                            grepl( "green", Param ) ~ "Green",
                            grepl( "ripe", Param ) ~ "Ripe",
                            grepl( "spent", Param ) ~ "Spent"
                          )
                        )
```

## Stacked probability of top net catch

```{r}
# After weighting code

# Probability facet by S
bind_rows(
  Mat_pre_ImpParamEsts_wt,
  Mat_spawn_ImpParamEsts_wt
) |> 
  pivot_longer(
    c( p_top_female_green:p_top_male_ripe, p_top_female_spent:p_top_male_spent ),
    names_to = "Parameter",
    values_to = "Estimate"
  ) |> 
  filter(
    !( is.na( Estimate ) )
  ) |> 
  mutate(
    Sex = if_else(
      Parameter %in% c( "p_top_male_green", "p_top_male_ripe", "p_top_male_spent" ),
      "Male",
      "Female"
    ),
    Maturity = case_when(
      grepl( "green", Parameter ) ~ "Green",
      grepl( "ripe", Parameter ) ~ "Ripe",
      grepl( "spent", Parameter ) ~ "Spent"
    ),
    across(
      c( Parameter, Period, Sex, Maturity, Model ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      fill = Period,
      color = Period
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0.50
      ),
      linetype = "dashed"
    ) +
    geom_vline(
      aes(
        xintercept = 0.67
      ),
      linetype = "dotted"
    ) +
    geom_vline(
      aes(
        xintercept = 0.33
      ),
      linetype = "dotted"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    theme_classic() +
    facet_grid(
      rows = vars( Maturity ),
      cols = vars( Sex ),
      scales = "free_y"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.945 ),
      axis.text = element_text( size = 13 ),
      legend.text = element_text( size = 14 ),
      axis.title = element_text( size = 14 ),
      strip.text = element_text( size = 16 ),
      title = element_text( size = 16 )
    ) +
    scale_color_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_fill_manual(
      "",
      values = c(
        "Spawning" = "#3E71A8",
        "Pre-spawn" = "#29BF12"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch )",
      limits = c( 0 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()

# Probability facet by P
Figure7_Obj3 <- bind_rows(
      Mat_pre_ImpParamEsts_wt,
      Mat_spawn_ImpParamEsts_wt
    ) |> 
      pivot_longer(
        c( p_top_female_green:p_top_male_ripe, p_top_female_spent:p_top_male_spent ),
        names_to = "Parameter",
        values_to = "Estimate"
      ) |> 
      filter(
        !( is.na( Estimate ) )
      ) |> 
      mutate(
        Sex = if_else(
          Parameter %in% c( "p_top_male_green", "p_top_male_ripe", "p_top_male_spent" ),
          "Male",
          "Female"
        ),
        Maturity = case_when(
          grepl( "green", Parameter ) ~ "Green",
          grepl( "ripe", Parameter ) ~ "Ripe",
          grepl( "spent", Parameter ) ~ "Spent"
        ),
        across(
          c( Parameter, Period, Sex, Maturity, Model ), 
          factor
        )
      ) |> 
      ggplot(
        aes(
          x = Estimate,
          fill = Sex,
          color = Sex
        )
      ) +
        ggdist::stat_slab(
          point_interval = ggdist::median_qi,
          .width = c( 0.5, 0.89 ),
          alpha = 0.5
        ) +
        ggdist::stat_pointinterval(
          point_interval = ggdist::median_qi,
          .width = c( 0.5, 0.89 ),
          position = position_dodge(
            width = 0.5,
            preserve = "single"
          )
        ) +
        geom_vline(
          aes(
            xintercept = 0.50
          ),
          linetype = "dashed"
        ) +
        geom_vline(
          aes(
            xintercept = 0.67
          ),
          linetype = "dotted"
        ) +
        geom_vline(
          aes(
            xintercept = 0.33
          ),
          linetype = "dotted"
        ) +
        geom_hline(
          aes(
            yintercept = 0
          ),
          linewidth = 1
        ) +
        theme_classic() +
        facet_grid(
          rows = vars( Maturity ),
          cols = vars( Period ),
          scales = "free_y"
        ) +
        theme(
          panel.border = element_rect(
            color = "black",
            fill = NA,
            linewidth = 1.5
          ),
          legend.position = c( 0.93, 0.945 ),
          axis.text = element_text( size = 11 ),
          legend.text = element_text( size = 14 ),
          axis.title = element_text( size = 14 ),
          strip.text = element_text( size = 16 ),
          title = element_text( size = 16 )
        ) +
        scale_color_manual(
          "",
          values = c(
            "Female" = "#D7263D",
            "Male" = "#558aa6"
          )
        ) +
        scale_fill_manual(
          "",
          values = c(
            "Female" = "#D7263D",
            "Male" = "#558aa6"
          )
        ) +
        scale_y_continuous(
          "",
          breaks = seq( 0, 1, 0.25 ),
          expand = expansion(
            mult = c( 0, 0.025 )
          )
        ) +
        scale_x_continuous(
          "Pr( Top Net | Catch )",
          limits = c( 0 , 1 ),
          expand = expansion(
            mult = c( 0.005, 0.005 )
          )
        ) +
        coord_flip()

ggsave( "Figure7_Obj3.tiff", plot = Figure7_Obj3, dpi = 350, width = 12, height = 11, units = "in" )
```

## Hypothesis support

```{r}
ROPE_summary_mat_mice <- bind_rows(
                          Mat_pre_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green:p_top_male_ripe
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.5 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "p < 0.5"
                            ),
                          Mat_pre_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green:p_top_male_ripe
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.5, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Pre-spawn",
                              Hypothesis = "p > 0.5"
                            ),
                          Mat_spawn_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green:p_top_male_spent
                            ) |> 
                            bayestestR::rope(
                              range = c( 0, 0.5 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "p < 0.5"
                            ),
                          Mat_spawn_ImpParamEsts_wt |> 
                            select(
                              p_top_female_green:p_top_male_spent
                            ) |> 
                            bayestestR::rope(
                              range = c( 0.5, 1 ),
                              ci = 1
                            ) |> 
                            as_tibble() |> 
                            mutate(
                              Period = "Spawning",
                              Hypothesis = "p > 0.5"
                            )
                        ) |> 
                        select( Parameter, ROPE_Percentage:Hypothesis ) |> 
                        pivot_wider(
                          names_from = Hypothesis,
                          values_from = ROPE_Percentage
                        ) |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", tolower( Parameter ) ),
                            "Female",
                            "Male"
                          ),
                          Maturity = case_when(
                            grepl( "green", Parameter ) ~ "Green",
                            grepl( "ripe", Parameter ) ~ "Ripe",
                            grepl( "spent", Parameter ) ~ "Spent"
                          )
                        ) |> 
                        arrange(
                          Sex,
                          Maturity,
                          Period
                        )

ROPE_summary_mat_mice |> 
  DT::datatable(
    rownames = FALSE,
    filter = "top",
    extensions = 'Buttons',
    caption = "Ojective 3 Hypothesis support",
    options = list(
      autoWidth = TRUE,
      pageLength = 5,
      dom = 'lBfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE
    )
  )

# Facet by S
ROPE_summary_mat_mice |> 
  pivot_longer(
    `p > 0.5`:`p < 0.5`,
    names_to = "PD",
    values_to = "Support"
  ) |> 
  mutate(
    PD = if_else(
      PD == "p > 0.5",
      "Top",
      "Bottom"
    )
  ) |> 
  ggplot(
    aes(
        x = Period,
        y = Support,
        fill = PD,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      rows = vars( Maturity ),
      cols = vars( Sex ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.1 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      "",
      labels = c(
        "Top" = bquote(italic(H)[italic('2')]~'- top catch'),
        "Bottom" = bquote(italic(H)[italic('1')]~'- bottom catch')
      ),
      discrete = TRUE,
      option = "F"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )

# Facet by P
ROPE_summary_mat_mice |> 
  pivot_longer(
    `p > 0.5`:`p < 0.5`,
    names_to = "PD",
    values_to = "Support"
  ) |> 
  mutate(
    PD = if_else(
      PD == "p > 0.5",
      "Top",
      "Bottom"
    )
  ) |> 
  ggplot(
    aes(
        x = Sex,
        y = Support,
        fill = PD,
        label = scales::percent( Support, accuracy = 0.1 )
      )
  ) +
    geom_col(
      position = position_dodge2(),
      color = "black"
    ) +
    geom_text(
      position = position_dodge( width = 0.9 ),
      vjust = -0.35,
      color = "black",
      size = 3
    ) +
    facet_grid(
      rows = vars( Maturity ),
      cols = vars( Period ),
      scales = "free_x"
    ) +
    scale_y_continuous(
      labels = scales::percent,
      expand = expansion(
        mult = c( 0, 0.1 )
      )
    ) +
    labs(
      x = ""
    ) +
    viridis::scale_fill_viridis(
      "",
      labels = c(
        "Top" = bquote(italic(H)[italic('2')]~'- top catch'),
        "Bottom" = bquote(italic(H)[italic('1')]~'- bottom catch')
      ),
      discrete = TRUE,
      option = "F"
    ) +
    theme_classic() +
    geom_vline(
      xintercept = 1.5,
      linetype = "dotted"
    ) +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      )
    )
```

## Contrast

```{r}
# Contrasted probability
# P
Mat_ImpParamCont_wt |> 
  filter(
    Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" )
  ) |> 
  select(
    -Param
  ) |> 
  group_by(
    Sex, Maturity
  ) |> 
  posterior::summarize_draws()

Mat_ImpParamCont_pd <- Mat_ImpParamCont_wt |> 
                        filter(
                          Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" )
                        ) |> 
                        select(
                          -c( Sex, Maturity )
                        ) |> 
                        group_by(
                          Param
                        ) |> 
                        mutate(
                          N = 1:n()
                        ) |> 
                        ungroup() |> 
                        pivot_wider(
                          names_from = "Param",
                          values_from = "Estimate"
                        ) |> 
                        select(
                          -N
                        ) |> 
                        bayestestR::pd() |> 
                        as_tibble() |> 
                        mutate(
                          Sex = if_else(
                            grepl( "female", tolower( Parameter ) ),
                            "Female",
                            "Male"
                          ),
                          Maturity = if_else(
                            grepl( "green", tolower( Parameter ) ),
                            "Green",
                            "Ripe"
                          ),
                          y = 0.65,
                          x = if_else(
                            Sex == "Male",
                            -0.9,
                            -0.75
                          ),
                          label = paste( Sex, "contrast pd:", round( pd, digits = 4 ) )
                        )

# S
Mat_ImpParamCont_wt |> 
  filter(
    !( Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" ) )
  ) |> 
  mutate(
    Period = if_else(
      grepl( "spawn", Param ),
      "Spawning",
      "Pre-spawn"
    )
  ) |> 
  select(
    -c( Param, Sex )
  ) |> 
  group_by(
    Period, Maturity
  ) |> 
  posterior::summarize_draws()

Mat_ImpParamCont_Spd <- Mat_ImpParamCont_wt |> 
                          filter(
                            !( Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" ) )
                          ) |> 
                          mutate(
                            Period = if_else(
                              grepl( "spawn", Param ),
                              "Spawning",
                              "Pre-spawn"
                            )
                          ) |> 
                          select(
                            -c( Sex, Maturity )
                          ) |> 
                          group_by(
                            Param
                          ) |> 
                          mutate(
                            N = 1:n()
                          ) |> 
                          ungroup() |> 
                          pivot_wider(
                            names_from = "Param",
                            values_from = "Estimate"
                          ) |> 
                          select(
                            -N
                          ) |> 
                          bayestestR::pd() |> 
                          as_tibble() |> 
                          mutate(
                            Period = if_else(
                              grepl( "spawn", Parameter ),
                              "Spawning",
                              "Pre-spawn"
                            ),
                            Maturity = case_when(
                              grepl( "green", Parameter ) ~ "Green",
                              grepl( "ripe", Parameter ) ~ "Ripe",
                              grepl( "spent", Parameter ) ~ "Spent"
                            ),
                            y = -0.05,
                            x = -0.5,
                            label = paste( Period, Maturity, "contrast pd:", round( pd, digits = 4 ) )
                          )

# P
Mat_ImpParamCont_wt |> 
  filter(
    Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" )
  ) |> 
  mutate(
    across(
      c( Param, Sex, Maturity ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      color = Sex,
      fill = Sex
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0
      ),
      linetype = "dashed"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    geom_text(
      data = Mat_ImpParamCont_pd,
      aes(
        x = x,
        y = y,
        color = Sex,
        label = label
      ),
      size = 8,
      show.legend = FALSE
    ) +
    facet_grid(
      rows = vars( Maturity ),
      scales = "free_y"
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.93 )
    ) +
    scale_color_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "Sex",
      values = c(
        "Female" = "#D7263D",
        "Male" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch ) Contrast: Prespawn to spawning",
      limits = c( -1 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    ) +
    coord_flip()

# S
Mat_ImpParamCont_wt |> 
  filter(
    !( Param %in% c( "p_top_female_green_cont", "p_top_female_ripe_cont", "p_top_male_green_cont", "p_top_male_ripe_cont" ) )
  ) |> 
  mutate(
    Period = if_else(
      grepl( "spawn", Param ),
      "Spawning",
      "Pre-spawn"
    ),
    across(
      c( Param, Sex, Maturity ), 
      factor
    )
  ) |> 
  ggplot(
    aes(
      x = Estimate,
      color = after_stat( x > 0 ),
      fill = after_stat( x > 0 )
    )
  ) +
    ggdist::stat_slab(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      alpha = 0.5
    ) +
    ggdist::stat_pointinterval(
      point_interval = ggdist::median_qi,
      .width = c( 0.5, 0.89 ),
      position = position_dodge(
        width = 0.5,
        preserve = "single"
      )
    ) +
    geom_vline(
      aes(
        xintercept = 0
      ),
      linetype = "dashed"
    ) +
    geom_hline(
      aes(
        yintercept = 0
      ),
      linewidth = 1
    ) +
    geom_text(
      data = Mat_ImpParamCont_Spd,
      aes(
        x = x,
        y = y,
        label = label
      ),
      color = "black",
      size = 4,
      show.legend = FALSE
    ) +
    facet_grid(
      cols = vars( Period ),
      rows = vars( Maturity ),
      scales = "free_y"
    ) +
    theme_classic() +
    theme(
      panel.border = element_rect(
        color = "black",
        fill = NA,
        linewidth = 1.5
      ),
      legend.position = c( 0.93, 0.93 )
    ) +
    scale_color_manual(
      "Female",
      values = c(
        "TRUE" = "#D7263D",
        "FALSE" = "#558aa6"
      )
    ) +
    scale_fill_manual(
      "Female",
      values = c(
        "TRUE" = "#D7263D",
        "FALSE" = "#558aa6"
      )
    ) +
    scale_y_continuous(
      "",
      breaks = seq( 0, 1, 0.25 ),
      expand = expansion(
        mult = c( 0, 0.025 )
      )
    ) +
    scale_x_continuous(
      "Pr( Top Net | Catch ) Contrast: Female to male",
      limits = c( -1 , 1 ),
      expand = expansion(
        mult = c( 0.005, 0.005 )
      )
    )
```